using System.Collections.Generic;
using Unity.Entities;

namespace VRising.GameData.Models.Internals
{
    public partial class NpcModel
    {
        private readonly World _world;
        private readonly Entity _entity;

        internal NpcModel(World world, Entity entity)
        {
            _world = world;
            _entity = entity;
        }
        public ProjectM.AbilityBar_Server AbilityBar_Server => _world.EntityManager.GetComponentData<ProjectM.AbilityBar_Server>(_entity);
        public ProjectM.AbilityBar_Shared AbilityBar_Shared => _world.EntityManager.GetComponentData<ProjectM.AbilityBar_Shared>(_entity);
        public ProjectM.AggroConsumer AggroConsumer => _world.EntityManager.GetComponentData<ProjectM.AggroConsumer>(_entity);
        public ProjectM.Follower Follower => _world.EntityManager.GetComponentData<ProjectM.Follower>(_entity);
        public ProjectM.EntityOwner EntityOwner => _world.EntityManager.GetComponentData<ProjectM.EntityOwner>(_entity);
        public ProjectM.EntityCreator EntityCreator => _world.EntityManager.GetComponentData<ProjectM.EntityCreator>(_entity);
        public ProjectM.BuffResistances BuffResistances => _world.EntityManager.GetComponentData<ProjectM.BuffResistances>(_entity);
        public ProjectM.InventoryOwner InventoryOwner => _world.EntityManager.GetComponentData<ProjectM.InventoryOwner>(_entity);
        public ProjectM.Team Team => _world.EntityManager.GetComponentData<ProjectM.Team>(_entity);
        public ProjectM.WorkstationAssignedServant WorkstationAssignedServant => _world.EntityManager.GetComponentData<ProjectM.WorkstationAssignedServant>(_entity);
        public ProjectM.EditableTileModel EditableTileModel => _world.EntityManager.GetComponentData<ProjectM.EditableTileModel>(_entity);
        public ProjectM.EntityInput EntityInput => _world.EntityManager.GetComponentData<ProjectM.EntityInput>(_entity);
        public ProjectM.AiMove_Server AiMove_Server => _world.EntityManager.GetComponentData<ProjectM.AiMove_Server>(_entity);
        public ProjectM.Behaviours.BehaviourTreeInstance BehaviourTreeInstance => _world.EntityManager.GetComponentData<ProjectM.Behaviours.BehaviourTreeInstance>(_entity);
        public ProjectM.CastleBuilding.CastleRoomConnection CastleRoomConnection => _world.EntityManager.GetComponentData<ProjectM.CastleBuilding.CastleRoomConnection>(_entity);
        public ProjectM.Pathfinding.LastPathRequest LastPathRequest => _world.EntityManager.GetComponentData<ProjectM.Pathfinding.LastPathRequest>(_entity);
        public Unity.Transforms.LocalToWorld LocalToWorld => _world.EntityManager.GetComponentData<Unity.Transforms.LocalToWorld>(_entity);
        public Unity.Transforms.Rotation Rotation => _world.EntityManager.GetComponentData<Unity.Transforms.Rotation>(_entity);
        public Unity.Transforms.Translation Translation => _world.EntityManager.GetComponentData<Unity.Transforms.Translation>(_entity);
        public Unity.Physics.PhysicsCollider PhysicsCollider => _world.EntityManager.GetComponentData<Unity.Physics.PhysicsCollider>(_entity);
        public Unity.Physics.Systems.StaticPhysicsWorldBodyIndex StaticPhysicsWorldBodyIndex => _world.EntityManager.GetComponentData<Unity.Physics.Systems.StaticPhysicsWorldBodyIndex>(_entity);
        public ProjectM.PrefabGUID PrefabGUID => _world.EntityManager.GetComponentData<ProjectM.PrefabGUID>(_entity);
        public ProjectM.AbilityBarInitializationState AbilityBarInitializationState => _world.EntityManager.GetComponentData<ProjectM.AbilityBarInitializationState>(_entity);
        public ProjectM.GainAggroByAlert GainAggroByAlert => _world.EntityManager.GetComponentData<ProjectM.GainAggroByAlert>(_entity);
        public ProjectM.GainAggroByVicinity GainAggroByVicinity => _world.EntityManager.GetComponentData<ProjectM.GainAggroByVicinity>(_entity);
        public ProjectM.GainAlertByVicinity GainAlertByVicinity => _world.EntityManager.GetComponentData<ProjectM.GainAlertByVicinity>(_entity);
        public ProjectM.AggroModifiers AggroModifiers => _world.EntityManager.GetComponentData<ProjectM.AggroModifiers>(_entity);
        public ProjectM.AlertModifiers AlertModifiers => _world.EntityManager.GetComponentData<ProjectM.AlertModifiers>(_entity);
        public ProjectM.AggroDamageHistoryConfig AggroDamageHistoryConfig => _world.EntityManager.GetComponentData<ProjectM.AggroDamageHistoryConfig>(_entity);
        public ProjectM.AiPrioritization_Data AiPrioritization_Data => _world.EntityManager.GetComponentData<ProjectM.AiPrioritization_Data>(_entity);
        public ProjectM.AiPrioritization_State AiPrioritization_State => _world.EntityManager.GetComponentData<ProjectM.AiPrioritization_State>(_entity);
        public ProjectM.Aggroable Aggroable => _world.EntityManager.GetComponentData<ProjectM.Aggroable>(_entity);
        public ProjectM.AiMoveSpeeds AiMoveSpeeds => _world.EntityManager.GetComponentData<ProjectM.AiMoveSpeeds>(_entity);
        public ProjectM.CastHistoryData CastHistoryData => _world.EntityManager.GetComponentData<ProjectM.CastHistoryData>(_entity);
        public ProjectM.FactionReference FactionReference => _world.EntityManager.GetComponentData<ProjectM.FactionReference>(_entity);
        public ProjectM.StationServants StationServants => _world.EntityManager.GetComponentData<ProjectM.StationServants>(_entity);
        public ProjectM.CastleWorkstation CastleWorkstation => _world.EntityManager.GetComponentData<ProjectM.CastleWorkstation>(_entity);
        public ProjectM.DestroyData DestroyData => _world.EntityManager.GetComponentData<ProjectM.DestroyData>(_entity);
        public ProjectM.DestroyState DestroyState => _world.EntityManager.GetComponentData<ProjectM.DestroyState>(_entity);
        public ProjectM.Buffable Buffable => _world.EntityManager.GetComponentData<ProjectM.Buffable>(_entity);
        public ProjectM.Hideable Hideable => _world.EntityManager.GetComponentData<ProjectM.Hideable>(_entity);
        public ProjectM.Stealthable Stealthable => _world.EntityManager.GetComponentData<ProjectM.Stealthable>(_entity);
        public ProjectM.Health Health => _world.EntityManager.GetComponentData<ProjectM.Health>(_entity);
        public ProjectM.HealthConstants HealthConstants => _world.EntityManager.GetComponentData<ProjectM.HealthConstants>(_entity);
        public ProjectM.LastTranslation LastTranslation => _world.EntityManager.GetComponentData<ProjectM.LastTranslation>(_entity);
        public ProjectM.Movement Movement => _world.EntityManager.GetComponentData<ProjectM.Movement>(_entity);
        public ProjectM.CollisionRadius CollisionRadius => _world.EntityManager.GetComponentData<ProjectM.CollisionRadius>(_entity);
        public ProjectM.MapCollision MapCollision => _world.EntityManager.GetComponentData<ProjectM.MapCollision>(_entity);
        public ProjectM.Velocity Velocity => _world.EntityManager.GetComponentData<ProjectM.Velocity>(_entity);
        public ProjectM.SpawnTransform SpawnTransform => _world.EntityManager.GetComponentData<ProjectM.SpawnTransform>(_entity);
        public ProjectM.TargetDirection TargetDirection => _world.EntityManager.GetComponentData<ProjectM.TargetDirection>(_entity);
        public ProjectM.JoinDefaultTeamOnSpawn JoinDefaultTeamOnSpawn => _world.EntityManager.GetComponentData<ProjectM.JoinDefaultTeamOnSpawn>(_entity);
        public ProjectM.TileBounds TileBounds => _world.EntityManager.GetComponentData<ProjectM.TileBounds>(_entity);
        public ProjectM.TilePosition TilePosition => _world.EntityManager.GetComponentData<ProjectM.TilePosition>(_entity);
        public ProjectM.TileModelSpatialData TileModelSpatialData => _world.EntityManager.GetComponentData<ProjectM.TileModelSpatialData>(_entity);
        public ProjectM.TileData TileData => _world.EntityManager.GetComponentData<ProjectM.TileData>(_entity);
        public ProjectM.UnitRespawnTime UnitRespawnTime => _world.EntityManager.GetComponentData<ProjectM.UnitRespawnTime>(_entity);
        public ProjectM.EntityCategory EntityCategory => _world.EntityManager.GetComponentData<ProjectM.EntityCategory>(_entity);
        public ProjectM.Immaterial Immaterial => _world.EntityManager.GetComponentData<ProjectM.Immaterial>(_entity);
        public ProjectM.Invulnerable Invulnerable => _world.EntityManager.GetComponentData<ProjectM.Invulnerable>(_entity);
        public ProjectM.UnitLevel UnitLevel => _world.EntityManager.GetComponentData<ProjectM.UnitLevel>(_entity);
        public ProjectM.Vision Vision => _world.EntityManager.GetComponentData<ProjectM.Vision>(_entity);
        public ProjectM.EntityAimData EntityAimData => _world.EntityManager.GetComponentData<ProjectM.EntityAimData>(_entity);
        public ProjectM.MoveVelocity MoveVelocity => _world.EntityManager.GetComponentData<ProjectM.MoveVelocity>(_entity);
        public ProjectM.ResistanceData ResistanceData => _world.EntityManager.GetComponentData<ProjectM.ResistanceData>(_entity);
        public ProjectM.UnitStats UnitStats => _world.EntityManager.GetComponentData<ProjectM.UnitStats>(_entity);
        public ProjectM.AiMove_Shared AiMove_Shared => _world.EntityManager.GetComponentData<ProjectM.AiMove_Shared>(_entity);
        public ProjectM.MinionSpawnData MinionSpawnData => _world.EntityManager.GetComponentData<ProjectM.MinionSpawnData>(_entity);
        public ProjectM.GenericCombatMovementData GenericCombatMovementData => _world.EntityManager.GetComponentData<ProjectM.GenericCombatMovementData>(_entity);
        public ProjectM.MiscAiGameplayData MiscAiGameplayData => _world.EntityManager.GetComponentData<ProjectM.MiscAiGameplayData>(_entity);
        public ProjectM.Sequencer.ImpactMaterial ImpactMaterial => _world.EntityManager.GetComponentData<ProjectM.Sequencer.ImpactMaterial>(_entity);
        public ProjectM.Network.NetworkedTimeout NetworkedTimeout => _world.EntityManager.GetComponentData<ProjectM.Network.NetworkedTimeout>(_entity);
        public ProjectM.Network.NetworkedSettings NetworkedSettings => _world.EntityManager.GetComponentData<ProjectM.Network.NetworkedSettings>(_entity);
        public ProjectM.Network.FrameChanged FrameChanged => _world.EntityManager.GetComponentData<ProjectM.Network.FrameChanged>(_entity);
        public ProjectM.Network.NetworkId NetworkId => _world.EntityManager.GetComponentData<ProjectM.Network.NetworkId>(_entity);
        public ProjectM.Network.NetworkSnapshot NetworkSnapshot => _world.EntityManager.GetComponentData<ProjectM.Network.NetworkSnapshot>(_entity);
        public ProjectM.Hybrid.HybridModelSeed HybridModelSeed => _world.EntityManager.GetComponentData<ProjectM.Hybrid.HybridModelSeed>(_entity);
        public ProjectM.Hybrid.DeathRagdollForce DeathRagdollForce => _world.EntityManager.GetComponentData<ProjectM.Hybrid.DeathRagdollForce>(_entity);
        public ProjectM.Behaviours.BehaviourTreeBinding BehaviourTreeBinding => _world.EntityManager.GetComponentData<ProjectM.Behaviours.BehaviourTreeBinding>(_entity);
        public ProjectM.Behaviours.BehaviourTreeState BehaviourTreeState => _world.EntityManager.GetComponentData<ProjectM.Behaviours.BehaviourTreeState>(_entity);
        public ProjectM.Behaviours.BehaviourTreeStateMetadata BehaviourTreeStateMetadata => _world.EntityManager.GetComponentData<ProjectM.Behaviours.BehaviourTreeStateMetadata>(_entity);
        public ProjectM.Tiles.TileModel TileModel => _world.EntityManager.GetComponentData<ProjectM.Tiles.TileModel>(_entity);
        public ProjectM.AiDebugDraw AiDebugDraw => _world.EntityManager.GetComponentData<ProjectM.AiDebugDraw>(_entity);
        public ProjectM.Pathfinding.Pathfinder Pathfinder => _world.EntityManager.GetComponentData<ProjectM.Pathfinding.Pathfinder>(_entity);
        public ProjectM.PlacementDestroyData PlacementDestroyData => _world.EntityManager.GetComponentData<ProjectM.PlacementDestroyData>(_entity);
        public ProjectM.CastleAreaRequirement CastleAreaRequirement => _world.EntityManager.GetComponentData<ProjectM.CastleAreaRequirement>(_entity);
        public ProjectM.Interactable Interactable => _world.EntityManager.GetComponentData<ProjectM.Interactable>(_entity);
        public ProjectM.InteractedUpon InteractedUpon => _world.EntityManager.GetComponentData<ProjectM.InteractedUpon>(_entity);
        public ProjectM.SpawnBuffIfPlayerInRange SpawnBuffIfPlayerInRange => _world.EntityManager.GetComponentData<ProjectM.SpawnBuffIfPlayerInRange>(_entity);
        public ProjectM.DynamicCollision DynamicCollision => _world.EntityManager.GetComponentData<ProjectM.DynamicCollision>(_entity);
        public ProjectM.Height Height => _world.EntityManager.GetComponentData<ProjectM.Height>(_entity);
        public ProjectM.AoETargetImportance AoETargetImportance => _world.EntityManager.GetComponentData<ProjectM.AoETargetImportance>(_entity);
        public ProjectM.YieldEssenceOnDeath YieldEssenceOnDeath => _world.EntityManager.GetComponentData<ProjectM.YieldEssenceOnDeath>(_entity);
        public ProjectM.IsSpellControlled IsSpellControlled => _world.EntityManager.GetComponentData<ProjectM.IsSpellControlled>(_entity);
        public ProjectM.Network.NetworkInterpolated_Shared NetworkInterpolated_Shared => _world.EntityManager.GetComponentData<ProjectM.Network.NetworkInterpolated_Shared>(_entity);
        public List<ProjectM.AggroBuffer> AggroBuffers => _world.EntityManager.GetBuffer<ProjectM.AggroBuffer>(_entity).ToList();
        public List<ProjectM.AlertBuffer> AlertBuffers => _world.EntityManager.GetBuffer<ProjectM.AlertBuffer>(_entity).ToList();
        public List<ProjectM.AggroCandidateBufferElement> AggroCandidateBufferElements => _world.EntityManager.GetBuffer<ProjectM.AggroCandidateBufferElement>(_entity).ToList();
        public List<ProjectM.AggroDamageHistoryBufferElement> AggroDamageHistoryBufferElements => _world.EntityManager.GetBuffer<ProjectM.AggroDamageHistoryBufferElement>(_entity).ToList();
        public List<ProjectM.ExternalAggroBufferElement> ExternalAggroBufferElements => _world.EntityManager.GetBuffer<ProjectM.ExternalAggroBufferElement>(_entity).ToList();
        public List<ProjectM.AbilityGroupSlotBuffer> AbilityGroupSlotBuffers => _world.EntityManager.GetBuffer<ProjectM.AbilityGroupSlotBuffer>(_entity).ToList();
        public List<ProjectM.InventoryBuffer> InventoryBuffers => _world.EntityManager.GetBuffer<ProjectM.InventoryBuffer>(_entity).ToList();
        public List<ProjectM.EntitiesInView_Server> EntitiesInView_Server => _world.EntityManager.GetBuffer<ProjectM.EntitiesInView_Server>(_entity).ToList();
        public List<ProjectM.BoolModificationBuffer> BoolModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.BoolModificationBuffer>(_entity).ToList();
        public List<ProjectM.EntityModificationBuffer> EntityModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.EntityModificationBuffer>(_entity).ToList();
        public List<ProjectM.FloatModificationBuffer> FloatModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.FloatModificationBuffer>(_entity).ToList();
        public List<ProjectM.Float3ModificationBuffer> Float3ModificationBuffer => _world.EntityManager.GetBuffer<ProjectM.Float3ModificationBuffer>(_entity).ToList();
        public List<ProjectM.IntModificationBuffer> IntModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.IntModificationBuffer>(_entity).ToList();
        public List<ProjectM.NetworkedEntityModificationBuffer> NetworkedEntityModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.NetworkedEntityModificationBuffer>(_entity).ToList();
        public List<ProjectM.PrefabGUIDModificationBuffer> PrefabGUIDModificationBuffers => _world.EntityManager.GetBuffer<ProjectM.PrefabGUIDModificationBuffer>(_entity).ToList();
        public List<ProjectM.Behaviours.BehaviourTreeStateActiveBuffsBuffer> BehaviourTreeStateActiveBuffsBuffers => _world.EntityManager.GetBuffer<ProjectM.Behaviours.BehaviourTreeStateActiveBuffsBuffer>(_entity).ToList();
        public List<ProjectM.QueuedWorkstationCraftAction> QueuedWorkstationCraftActions => _world.EntityManager.GetBuffer<ProjectM.QueuedWorkstationCraftAction>(_entity).ToList();
        public List<ProjectM.QueuedWorkstationCraftActionItems> QueuedWorkstationCraftActionItems => _world.EntityManager.GetBuffer<ProjectM.QueuedWorkstationCraftActionItems>(_entity).ToList();
        public List<Stunlock.Sequencer.BlackboardElement> BlackboardElements => _world.EntityManager.GetBuffer<Stunlock.Sequencer.BlackboardElement>(_entity).ToList();
        public List<ProjectM.CastHistoryBufferElement> CastHistoryBufferElements => _world.EntityManager.GetBuffer<ProjectM.CastHistoryBufferElement>(_entity).ToList();
        public List<ProjectM.StationBonusBuffer> StationBonusBuffers => _world.EntityManager.GetBuffer<ProjectM.StationBonusBuffer>(_entity).ToList();
        public List<ProjectM.WorkstationRecipesBuffer> WorkstationRecipesBuffers => _world.EntityManager.GetBuffer<ProjectM.WorkstationRecipesBuffer>(_entity).ToList();
        public List<ProjectM.SharedGameplayConditionReference> SharedGameplayConditionReferences => _world.EntityManager.GetBuffer<ProjectM.SharedGameplayConditionReference>(_entity).ToList();
        public List<ProjectM.GameplayConditionGroup> GameplayConditionGroups => _world.EntityManager.GetBuffer<ProjectM.GameplayConditionGroup>(_entity).ToList();
        public List<ProjectM.GameplayCondition> GameplayConditions => _world.EntityManager.GetBuffer<ProjectM.GameplayCondition>(_entity).ToList();
        public List<ProjectM.Network.NetSnapshot> NetSnapshots => _world.EntityManager.GetBuffer<ProjectM.Network.NetSnapshot>(_entity).ToList();
        public List<ProjectM.Network.SnapshotFrameChangedBuffer> SnapshotFrameChangedBuffers => _world.EntityManager.GetBuffer<ProjectM.Network.SnapshotFrameChangedBuffer>(_entity).ToList();
        public List<ProjectM.Behaviours.BehaviourTreeStateBuffsBuffer> BehaviourTreeStateBuffsBuffers => _world.EntityManager.GetBuffer<ProjectM.Behaviours.BehaviourTreeStateBuffsBuffer>(_entity).ToList();
        public List<ProjectM.Pathfinding.PathBuffer> PathBuffers => _world.EntityManager.GetBuffer<ProjectM.Pathfinding.PathBuffer>(_entity).ToList();
        public List<ProjectM.Pathfinding.PathRequestFilledSegmentBuffer> PathRequestFilledSegmentBuffers => _world.EntityManager.GetBuffer<ProjectM.Pathfinding.PathRequestFilledSegmentBuffer>(_entity).ToList();
        public List<ProjectM.Pathfinding.UnsmoothedPathBuffer> UnsmoothedPathBuffers => _world.EntityManager.GetBuffer<ProjectM.Pathfinding.UnsmoothedPathBuffer>(_entity).ToList();
        public List<ProjectM.InteractAbilityBuffer> InteractAbilityBuffers => _world.EntityManager.GetBuffer<ProjectM.InteractAbilityBuffer>(_entity).ToList();
        public List<ProjectM.DropTableBuffer> DropTableBuffers => _world.EntityManager.GetBuffer<ProjectM.DropTableBuffer>(_entity).ToList();
        public List<ProjectM.Gameplay.Scripting.Script_SCTChatOnAggro_Buffer> Script_SCTChatOnAggro_Buffer => _world.EntityManager.GetBuffer<ProjectM.Gameplay.Scripting.Script_SCTChatOnAggro_Buffer>(_entity).ToList();
        public List<ProjectM.Behaviours.BehaviourTreeNodeInstanceElement> BehaviourTreeNodeInstanceElements => _world.EntityManager.GetBuffer<ProjectM.Behaviours.BehaviourTreeNodeInstanceElement>(_entity).ToList();
        public List<ProjectM.Network.Snapshot_AbilityGroupSlotBuffer> Snapshot_AbilityGroupSlotBuffer => _world.EntityManager.GetBuffer<ProjectM.Network.Snapshot_AbilityGroupSlotBuffer>(_entity).ToList();
        public List<ProjectM.Network.Snapshot_InventoryBuffer> Snapshot_InventoryBuffer => _world.EntityManager.GetBuffer<ProjectM.Network.Snapshot_InventoryBuffer>(_entity).ToList();
        public List<ProjectM.Network.Snapshot_QueuedWorkstationCraftAction> Snapshot_QueuedWorkstationCraftAction => _world.EntityManager.GetBuffer<ProjectM.Network.Snapshot_QueuedWorkstationCraftAction>(_entity).ToList();
        public bool PrefabCollectionPrefabTag => _world.EntityManager.HasComponent<ProjectM.PrefabCollectionPrefabTag>(_entity);
        public bool UsesSpawnTag => _world.EntityManager.HasComponent<ProjectM.UsesSpawnTag>(_entity);
        public bool MoveEntity => _world.EntityManager.HasComponent<ProjectM.MoveEntity>(_entity);
        public bool TilePlacementTag => _world.EntityManager.HasComponent<ProjectM.TilePlacementTag>(_entity);
        public bool Networked => _world.EntityManager.HasComponent<ProjectM.Network.Networked>(_entity);
        public bool MoveStopTrigger => _world.EntityManager.HasComponent<ProjectM.MoveStopTrigger>(_entity);
        public bool SnapToHeight => _world.EntityManager.HasComponent<ProjectM.SnapToHeight>(_entity);
        public bool HideOutsideVision => _world.EntityManager.HasComponent<ProjectM.HideOutsideVision>(_entity);
        public bool DropTable => _world.EntityManager.HasComponent<ProjectM.DropTable>(_entity);
        public bool DropTableOnDeath => _world.EntityManager.HasComponent<ProjectM.DropTableOnDeath>(_entity);
        public bool EntitySpawnedMetadata => _world.EntityManager.HasComponent<ProjectM.Gameplay.EntitySpawnedMetadata>(_entity);
        public bool BlobAssetOwner => _world.EntityManager.HasComponent<Unity.Entities.BlobAssetOwner>(_entity);
        public bool TileModelRegistrationState => _world.EntityManager.HasComponent<ProjectM.TileModelRegistrationState>(_entity);
        public bool NetworkSnapshotType => _world.EntityManager.HasComponent<ProjectM.Network.NetworkSnapshotType>(_entity);
        public bool TileModelLayer => _world.EntityManager.HasComponent<ProjectM.Tiles.TileModelLayer>(_entity);
        public ProjectM.FeedableInventory FeedableInventory => _world.EntityManager.GetComponentData<ProjectM.FeedableInventory>(_entity);
        public ProjectM.Mountable Mountable => _world.EntityManager.GetComponentData<ProjectM.Mountable>(_entity);
        public ProjectM.WoundedConstants WoundedConstants => _world.EntityManager.GetComponentData<ProjectM.WoundedConstants>(_entity);
        public ProjectM.CanPreventDisableWhenNoPlayersInRange CanPreventDisableWhenNoPlayersInRange => _world.EntityManager.GetComponentData<ProjectM.CanPreventDisableWhenNoPlayersInRange>(_entity);
        public ProjectM.NameableInteractable NameableInteractable => _world.EntityManager.GetComponentData<ProjectM.NameableInteractable>(_entity);
        public List<ProjectM.CreateGameplayEventsOnTick> CreateGameplayEventsOnTicks => _world.EntityManager.GetBuffer<ProjectM.CreateGameplayEventsOnTick>(_entity).ToList();
        public List<ProjectM.HealOnGameplayEvent> HealOnGameplayEvents => _world.EntityManager.GetBuffer<ProjectM.HealOnGameplayEvent>(_entity).ToList();
        public List<ProjectM.GameplayEventIdMapping> GameplayEventIdMappings => _world.EntityManager.GetBuffer<ProjectM.GameplayEventIdMapping>(_entity).ToList();
        public bool CharmSource => _world.EntityManager.HasComponent<ProjectM.CharmSource>(_entity);
        public List<ProjectM.MinionBuffer> MinionBuffers => _world.EntityManager.GetBuffer<ProjectM.MinionBuffer>(_entity).ToList();
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderHealthThreshhold_DataServer Script_ApplyBuffUnderHealthThreshhold_DataServer => _world.EntityManager.GetComponentData<ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderHealthThreshhold_DataServer>(_entity);
        public ProjectM.BloodConsumeSource BloodConsumeSource => _world.EntityManager.GetComponentData<ProjectM.BloodConsumeSource>(_entity);
        public ProjectM.VBloodConsumeSource VBloodConsumeSource => _world.EntityManager.GetComponentData<ProjectM.VBloodConsumeSource>(_entity);
        public ProjectM.VBloodRewardSequence VBloodRewardSequence => _world.EntityManager.GetComponentData<ProjectM.VBloodRewardSequence>(_entity);
        public ProjectM.Immortal Immortal => _world.EntityManager.GetComponentData<ProjectM.Immortal>(_entity);
        public ProjectM.VBloodUnit VBloodUnit => _world.EntityManager.GetComponentData<ProjectM.VBloodUnit>(_entity);
        public ProjectM.TravelToTargetRadius TravelToTargetRadius => _world.EntityManager.GetComponentData<ProjectM.TravelToTargetRadius>(_entity);
        public ProjectM.Torture Torture => _world.EntityManager.GetComponentData<ProjectM.Torture>(_entity);
        public List<ProjectM.RandomBloodTypeBuffer> RandomBloodTypeBuffers => _world.EntityManager.GetBuffer<ProjectM.RandomBloodTypeBuffer>(_entity).ToList();
        public List<ProjectM.VBloodUnlockTechBuffer> VBloodUnlockTechBuffers => _world.EntityManager.GetBuffer<ProjectM.VBloodUnlockTechBuffer>(_entity).ToList();
        public List<ProjectM.CreateGameplayEventsOnSpawn> CreateGameplayEventsOnSpawns => _world.EntityManager.GetBuffer<ProjectM.CreateGameplayEventsOnSpawn>(_entity).ToList();
        public List<ProjectM.ApplyBuffOnGameplayEvent> ApplyBuffOnGameplayEvents => _world.EntityManager.GetBuffer<ProjectM.ApplyBuffOnGameplayEvent>(_entity).ToList();
        public List<ProjectM.ApplyBuffOnGameplayEventEntry> ApplyBuffOnGameplayEventEntries => _world.EntityManager.GetBuffer<ProjectM.ApplyBuffOnGameplayEventEntry>(_entity).ToList();
        public bool ScriptSpawn => _world.EntityManager.HasComponent<ProjectM.Scripting.ScriptSpawn>(_entity);
        public bool CombatMusicSource_Server => _world.EntityManager.HasComponent<ProjectM.CombatMusicSource_Server>(_entity);
        public ProjectM.MinionMaster MinionMaster => _world.EntityManager.GetComponentData<ProjectM.MinionMaster>(_entity);
        public List<ProjectM.MaxMinionsPerPlayerElement> MaxMinionsPerPlayerElements => _world.EntityManager.GetBuffer<ProjectM.MaxMinionsPerPlayerElement>(_entity).ToList();
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer => _world.EntityManager.GetComponentData<ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer>(_entity);
        public ProjectM.ServantConvertable ServantConvertable => _world.EntityManager.GetComponentData<ProjectM.ServantConvertable>(_entity);
        public List<ProjectM.CreateGameplayEventOnDeath> CreateGameplayEventOnDeaths => _world.EntityManager.GetBuffer<ProjectM.CreateGameplayEventOnDeath>(_entity).ToList();
        public List<ProjectM.SpawnPrefabOnGameplayEvent> SpawnPrefabOnGameplayEvents => _world.EntityManager.GetBuffer<ProjectM.SpawnPrefabOnGameplayEvent>(_entity).ToList();
        public List<ProjectM.CreateGameplayEventOnDamageTaken> CreateGameplayEventOnDamageTakens => _world.EntityManager.GetBuffer<ProjectM.CreateGameplayEventOnDamageTaken>(_entity).ToList();
        public ProjectM.CanFly CanFly => _world.EntityManager.GetComponentData<ProjectM.CanFly>(_entity);
        public ProjectM.FallToHeight FallToHeight => _world.EntityManager.GetComponentData<ProjectM.FallToHeight>(_entity);
        public bool VisibleFromFlight => _world.EntityManager.HasComponent<ProjectM.VisibleFromFlight>(_entity);
        public ProjectM.Gameplay.Scripting.CastAbilityInStateScript_DataServer CastAbilityInStateScript_DataServer => _world.EntityManager.GetComponentData<ProjectM.Gameplay.Scripting.CastAbilityInStateScript_DataServer>(_entity);
        public bool ScriptUpdate => _world.EntityManager.HasComponent<ProjectM.Scripting.ScriptUpdate>(_entity);
        public bool DisableWhenNoPlayersInRange => _world.EntityManager.HasComponent<ProjectM.DisableWhenNoPlayersInRange>(_entity);
        public ProjectM.GetOwnerTranslationOnSpawn GetOwnerTranslationOnSpawn => _world.EntityManager.GetComponentData<ProjectM.GetOwnerTranslationOnSpawn>(_entity);
        public ProjectM.CastleBuilding.CastleBuildingAttachSettings CastleBuildingAttachSettings => _world.EntityManager.GetComponentData<ProjectM.CastleBuilding.CastleBuildingAttachSettings>(_entity);
        public List<ProjectM.CastleBuilding.CastleBuildingAttachToParentsBuffer> CastleBuildingAttachToParentsBuffers => _world.EntityManager.GetBuffer<ProjectM.CastleBuilding.CastleBuildingAttachToParentsBuffer>(_entity).ToList();
        public List<ProjectM.Network.Snapshot_CastleBuildingAttachToParentsBuffer> Snapshot_CastleBuildingAttachToParentsBuffer => _world.EntityManager.GetBuffer<ProjectM.Network.Snapshot_CastleBuildingAttachToParentsBuffer>(_entity).ToList();
        public ProjectM.DestroyWhenNoCharacterNearbyAfterDuration DestroyWhenNoCharacterNearbyAfterDuration => _world.EntityManager.GetComponentData<ProjectM.DestroyWhenNoCharacterNearbyAfterDuration>(_entity);
        public List<ProjectM.ProgressionBookShapeshiftElement> ProgressionBookShapeshiftElements => _world.EntityManager.GetBuffer<ProjectM.ProgressionBookShapeshiftElement>(_entity).ToList();
    }
}