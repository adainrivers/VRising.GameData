using System.Collections.Generic;
using Unity.Entities;

namespace VRising.GameData.Models.Internals
{
    public class BaseEntityModel
    {
        private readonly World _world;
        private readonly Entity _entity;

        internal BaseEntityModel(World world, Entity entity)
        {
            _world = world;
            _entity = entity;
        }
        public Unity.Entities.SceneReference? SceneReference => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.SceneReference>(_entity, out var value) ? value : null;
        public Unity.Entities.RequestSceneLoaded? RequestSceneLoaded => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.RequestSceneLoaded>(_entity, out var value) ? value : null;
        public Unity.Scenes.ResolvedSceneHash? ResolvedSceneHash => _world.EntityManager.TryGetComponentDataInternal<Unity.Scenes.ResolvedSceneHash>(_entity, out var value) ? value : null;
        public List<Unity.Entities.LinkedEntityGroup> LinkedEntityGroups => _world.EntityManager.GetBufferInternal<Unity.Entities.LinkedEntityGroup>(_entity);
        public List<Unity.Scenes.ResolvedSectionEntity> ResolvedSectionEntities => _world.EntityManager.GetBufferInternal<Unity.Scenes.ResolvedSectionEntity>(_entity);
        public Unity.Entities.PostLoadCommandBuffer? PostLoadCommandBuffer => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.PostLoadCommandBuffer>(_entity, out var value) ? value : null;
        public ProjectM.ServerRuntimeSettings? ServerRuntimeSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerRuntimeSettings>(_entity, out var value) ? value : null;
        public bool Prefab => _world.EntityManager.HasComponentInternal<Unity.Entities.Prefab>(_entity);
        public ProjectM.Network.NetworkedSettings? NetworkedSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.NetworkedSettings>(_entity, out var value) ? value : null;
        public ProjectM.Network.FrameChanged? FrameChanged => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.FrameChanged>(_entity, out var value) ? value : null;
        public ProjectM.Network.NetworkSnapshot? NetworkSnapshot => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.NetworkSnapshot>(_entity, out var value) ? value : null;
        public ProjectM.Network.DestroyedEntity? DestroyedEntity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.DestroyedEntity>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.NetSnapshot> NetSnapshots => _world.EntityManager.GetBufferInternal<ProjectM.Network.NetSnapshot>(_entity);
        public List<ProjectM.Network.SnapshotFrameChangedBuffer> SnapshotFrameChangedBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.SnapshotFrameChangedBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_AbilityGroupSlotBuffer> Snapshot_AbilityGroupSlotBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_AbilityGroupSlotBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_InventoryBuffer> Snapshot_InventoryBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_InventoryBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_PerksBuffer> Snapshot_PerksBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_PerksBuffer>(_entity);
        public bool NewDestroyedEntity => _world.EntityManager.HasComponentInternal<ProjectM.Network.NewDestroyedEntity>(_entity);
        public ProjectM.WorldTypeSingleton? WorldTypeSingleton => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WorldTypeSingleton>(_entity, out var value) ? value : null;
        public ProjectM.WorldFrame? WorldFrame => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WorldFrame>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.TerrainChunkLoadedEvent? TerrainChunkLoadedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.TerrainChunkLoadedEvent>(_entity, out var value) ? value : null;
        public List<Unity.Scenes.PublicEntityRef> PublicEntityRefs => _world.EntityManager.GetBufferInternal<Unity.Scenes.PublicEntityRef>(_entity);
        public ProjectM.Terrain.TerrainChunkMetadataLoadedEvent? TerrainChunkMetadataLoadedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.TerrainChunkMetadataLoadedEvent>(_entity, out var value) ? value : null;
        public ProjectM.LoadToTargetWorld? LoadToTargetWorld => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LoadToTargetWorld>(_entity, out var value) ? value : null;
        public ProjectM.ServerGameBalanceSettings? ServerGameBalanceSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerGameBalanceSettings>(_entity, out var value) ? value : null;
        public ProjectM.ToggleDisabledEvent? ToggleDisabledEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ToggleDisabledEvent>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_CastleBuildingAttachedChildrenBuffer> Snapshot_CastleBuildingAttachedChildrenBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_CastleBuildingAttachedChildrenBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_CastleBuildingAttachToParentsBuffer> Snapshot_CastleBuildingAttachToParentsBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_CastleBuildingAttachToParentsBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_RefinementstationRecipesBuffer> Snapshot_RefinementstationRecipesBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_RefinementstationRecipesBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_ActiveServantMission> Snapshot_ActiveServantMission => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ActiveServantMission>(_entity);
        public Unity.Transforms.LocalToWorld? LocalToWorld => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.LocalToWorld>(_entity, out var value) ? value : null;
        public ProjectM.TileBounds? TileBounds => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TileBounds>(_entity, out var value) ? value : null;
        public ProjectM.TilePosition? TilePosition => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TilePosition>(_entity, out var value) ? value : null;
        public ProjectM.TileModelSpatialData? TileModelSpatialData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TileModelSpatialData>(_entity, out var value) ? value : null;
        public ProjectM.TileData? TileData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TileData>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.MapZoneData? MapZoneData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.MapZoneData>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.TileModel? TileModel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.TileModel>(_entity, out var value) ? value : null;
        public List<ProjectM.Terrain.MapZonePolygonVertexElement> MapZonePolygonVertexElements => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.MapZonePolygonVertexElement>(_entity);
        public List<ProjectM.Terrain.MapZoneDiscoverableElement> MapZoneDiscoverableElements => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.MapZoneDiscoverableElement>(_entity);
        public bool TileRestrictionAreaTag => _world.EntityManager.HasComponentInternal<ProjectM.TileRestrictionAreaTag>(_entity);
        public bool TileModelRegistrationState => _world.EntityManager.HasComponentInternal<ProjectM.TileModelRegistrationState>(_entity);
        public Unity.Entities.RetainBlobAssets? RetainBlobAssets => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.RetainBlobAssets>(_entity, out var value) ? value : null;
        public Unity.Entities.RetainBlobAssetBatchPtr? RetainBlobAssetBatchPtr => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.RetainBlobAssetBatchPtr>(_entity, out var value) ? value : null;
        public bool BlobAssetOwner => _world.EntityManager.HasComponentInternal<Unity.Entities.BlobAssetOwner>(_entity);
        public List<ProjectM.Network.Snapshot_TeamAllies> Snapshot_TeamAllies => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_TeamAllies>(_entity);
        public List<ProjectM.Terrain.WorldAssetChunks> WorldAssetChunks => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.WorldAssetChunks>(_entity);
        public bool WorldAssetSingleton => _world.EntityManager.HasComponentInternal<ProjectM.Terrain.WorldAssetSingleton>(_entity);
        public bool WorldConfigSingleton => _world.EntityManager.HasComponentInternal<ProjectM.Terrain.WorldConfigSingleton>(_entity);
        public List<ProjectM.RelicDropped> RelicDroppeds => _world.EntityManager.GetBufferInternal<ProjectM.RelicDropped>(_entity);
        public ProjectM.KnockbackAssetsSingleton? KnockbackAssetsSingleton => _world.EntityManager.TryGetComponentDataInternal<ProjectM.KnockbackAssetsSingleton>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_SpawnedUnitsBuffer> Snapshot_SpawnedUnitsBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_SpawnedUnitsBuffer>(_entity);
        public Unity.Scenes.SceneEntityReference? SceneEntityReference => _world.EntityManager.TryGetComponentDataInternal<Unity.Scenes.SceneEntityReference>(_entity, out var value) ? value : null;
        public Unity.Entities.SceneSectionData? SceneSectionData => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.SceneSectionData>(_entity, out var value) ? value : null;
        public Unity.Scenes.ResolvedSectionPath? ResolvedSectionPath => _world.EntityManager.TryGetComponentDataInternal<Unity.Scenes.ResolvedSectionPath>(_entity, out var value) ? value : null;
        public Unity.Scenes.SceneBoundingVolume? SceneBoundingVolume => _world.EntityManager.TryGetComponentDataInternal<Unity.Scenes.SceneBoundingVolume>(_entity, out var value) ? value : null;
        public Unity.Physics.PhysicsCollider? PhysicsCollider => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsCollider>(_entity, out var value) ? value : null;
        public Unity.Physics.Systems.StaticPhysicsWorldBodyIndex? StaticPhysicsWorldBodyIndex => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.Systems.StaticPhysicsWorldBodyIndex>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_Script_BloodKey_SenseCastle_Entry> Snapshot_Script_BloodKey_SenseCastle_Entry => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_Script_BloodKey_SenseCastle_Entry>(_entity);
        public ProjectM.ModifyMovementDuringCastActive? ModifyMovementDuringCastActive => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyMovementDuringCastActive>(_entity, out var value) ? value : null;
        public ProjectM.DestroyData? DestroyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyData>(_entity, out var value) ? value : null;
        public ProjectM.DestroyState? DestroyState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyState>(_entity, out var value) ? value : null;
        public ProjectM.MoveDuringCastActive? MoveDuringCastActive => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MoveDuringCastActive>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_QueuedWorkstationCraftAction> Snapshot_QueuedWorkstationCraftAction => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_QueuedWorkstationCraftAction>(_entity);
        public ProjectM.RotateTowardsAimDirectionDuringCastActive? RotateTowardsAimDirectionDuringCastActive => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RotateTowardsAimDirectionDuringCastActive>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_ResearchBuffer> Snapshot_ResearchBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ResearchBuffer>(_entity);
        public ProjectM.AbilityCastStartedEvent? AbilityCastStartedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCastStartedEvent>(_entity, out var value) ? value : null;
        public ProjectM.AbilityCastFinishedEvent? AbilityCastFinishedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCastFinishedEvent>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_AllyPermission> Snapshot_AllyPermission => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_AllyPermission>(_entity);
        public List<ProjectM.Network.Snapshot_RespawnPointOwnerBuffer> Snapshot_RespawnPointOwnerBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_RespawnPointOwnerBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_UnlockedWaypointElement> Snapshot_UnlockedWaypointElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_UnlockedWaypointElement>(_entity);
        public List<ProjectM.Network.Snapshot_UserMapZoneElement> Snapshot_UserMapZoneElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_UserMapZoneElement>(_entity);
        public ProjectM.AbilityPostCastFinishedEvent? AbilityPostCastFinishedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityPostCastFinishedEvent>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_FollowerBuffer> Snapshot_FollowerBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_FollowerBuffer>(_entity);
        public ProjectM.AbilityCastEndedEvent? AbilityCastEndedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCastEndedEvent>(_entity, out var value) ? value : null;
        public ProjectM.AbilityPostCastEndedEvent? AbilityPostCastEndedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityPostCastEndedEvent>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_AbilityStateBuffer> Snapshot_AbilityStateBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_AbilityStateBuffer>(_entity);
        public ProjectM.AbilityInterruptedEvent? AbilityInterruptedEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityInterruptedEvent>(_entity, out var value) ? value : null;
        public ProjectM.TeleportationRequest? TeleportationRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TeleportationRequest>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_Restricted_InventoryBuffer> Snapshot_Restricted_InventoryBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_Restricted_InventoryBuffer>(_entity);
        public List<ProjectM.Network.Snapshot_AchievementInProgressElement> Snapshot_AchievementInProgressElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_AchievementInProgressElement>(_entity);
        public Unity.Physics.PhysicsStep? PhysicsStep => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsStep>(_entity, out var value) ? value : null;
        public Unity.Entities.WorldTime? WorldTime => _world.EntityManager.TryGetComponentDataInternal<Unity.Entities.WorldTime>(_entity, out var value) ? value : null;
        public List<Unity.Entities.WorldTimeQueue> WorldTimeQueues => _world.EntityManager.GetBufferInternal<Unity.Entities.WorldTimeQueue>(_entity);
        public ProjectM.Sun? Sun => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Sun>(_entity, out var value) ? value : null;
        public ProjectM.CloudCookieLight? CloudCookieLight => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CloudCookieLight>(_entity, out var value) ? value : null;
        public List<ProjectM.Network.Snapshot_ProgressionBookBlueprintElement> Snapshot_ProgressionBookBlueprintElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ProgressionBookBlueprintElement>(_entity);
        public List<ProjectM.Network.Snapshot_ProgressionBookRecipeElement> Snapshot_ProgressionBookRecipeElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ProgressionBookRecipeElement>(_entity);
        public List<ProjectM.Network.Snapshot_ProgressionBookShapeshiftElement> Snapshot_ProgressionBookShapeshiftElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ProgressionBookShapeshiftElement>(_entity);
        public List<ProjectM.Network.Snapshot_ProgressionBookTechElement> Snapshot_ProgressionBookTechElement => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_ProgressionBookTechElement>(_entity);
        public List<ProjectM.Network.Snapshot_BloodHuntBuffer> Snapshot_BloodHuntBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Network.Snapshot_BloodHuntBuffer>(_entity);
        public Unity.Transforms.Rotation? Rotation => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.Rotation>(_entity, out var value) ? value : null;
        public Unity.Transforms.Translation? Translation => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.Translation>(_entity, out var value) ? value : null;
        public ProjectM.PrefabGUID? PrefabGUID => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PrefabGUID>(_entity, out var value) ? value : null;
        public ProjectM.AiPointOfInterest? AiPointOfInterest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiPointOfInterest>(_entity, out var value) ? value : null;
        public ProjectM.AutoChainInstanceData? AutoChainInstanceData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AutoChainInstanceData>(_entity, out var value) ? value : null;
        public bool SpawnTag => _world.EntityManager.HasComponentInternal<Unity.Entities.SpawnTag>(_entity);
        public bool PrefabCollectionPrefabTag => _world.EntityManager.HasComponentInternal<ProjectM.PrefabCollectionPrefabTag>(_entity);
        public bool UsesSpawnTag => _world.EntityManager.HasComponentInternal<ProjectM.UsesSpawnTag>(_entity);
        public bool DisableWhenNoPlayersInRange => _world.EntityManager.HasComponentInternal<ProjectM.DisableWhenNoPlayersInRange>(_entity);
        public List<ProjectM.EntityNameCollectionBuffer> EntityNameCollectionBuffers => _world.EntityManager.GetBufferInternal<ProjectM.EntityNameCollectionBuffer>(_entity);
        public List<ProjectM.PrefabCollectionBuffer> PrefabCollectionBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PrefabCollectionBuffer>(_entity);
        public bool PrefabCollectionTag => _world.EntityManager.HasComponentInternal<ProjectM.PrefabCollectionTag>(_entity);
        public bool GameDataSubSceneTag => _world.EntityManager.HasComponentInternal<ProjectM.GameDataSubSceneTag>(_entity);
        public ProjectM.RandomizedSpawnChain? RandomizedSpawnChain => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RandomizedSpawnChain>(_entity, out var value) ? value : null;
        public ProjectM.StaticTransformIndex? StaticTransformIndex => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StaticTransformIndex>(_entity, out var value) ? value : null;
        public ProjectM.BlueprintData? BlueprintData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BlueprintData>(_entity, out var value) ? value : null;
        public ProjectM.Team? Team => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Team>(_entity, out var value) ? value : null;
        public ProjectM.EditableTileModel? EditableTileModel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EditableTileModel>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleAreaConnection? CastleAreaConnection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleAreaConnection>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleHeartConnection? CastleHeartConnection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleHeartConnection>(_entity, out var value) ? value : null;
        public ProjectM.DismantleDestroyData? DismantleDestroyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DismantleDestroyData>(_entity, out var value) ? value : null;
        public ProjectM.JoinDefaultTeamOnSpawn? JoinDefaultTeamOnSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.JoinDefaultTeamOnSpawn>(_entity, out var value) ? value : null;
        public ProjectM.Network.UpToDateUserBitMask? UpToDateUserBitMask => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.UpToDateUserBitMask>(_entity, out var value) ? value : null;
        public ProjectM.Network.NetworkId? NetworkId => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.NetworkId>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleBuildingMaxRange? CastleBuildingMaxRange => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleBuildingMaxRange>(_entity, out var value) ? value : null;
        public ProjectM.PlacementDestroyData? PlacementDestroyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlacementDestroyData>(_entity, out var value) ? value : null;
        public ProjectM.CastleAreaRequirement? CastleAreaRequirement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleAreaRequirement>(_entity, out var value) ? value : null;
        public List<ProjectM.NetworkedEntityModificationBuffer> NetworkedEntityModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.NetworkedEntityModificationBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleBuildingAttachedChildrenBuffer> CastleBuildingAttachedChildrenBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleBuildingAttachedChildrenBuffer>(_entity);
        public List<ProjectM.BlueprintRequirementBuffer> BlueprintRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.BlueprintRequirementBuffer>(_entity);
        public bool TilePlacementTag => _world.EntityManager.HasComponentInternal<ProjectM.TilePlacementTag>(_entity);
        public bool Networked => _world.EntityManager.HasComponentInternal<ProjectM.Network.Networked>(_entity);
        public bool RunCastleCleanupOnDeath => _world.EntityManager.HasComponentInternal<ProjectM.Tiles.RunCastleCleanupOnDeath>(_entity);
        public bool RestrictPlacementToMapZones => _world.EntityManager.HasComponentInternal<ProjectM.CastleBuilding.Placement.RestrictPlacementToMapZones>(_entity);
        public bool NetworkSnapshotType => _world.EntityManager.HasComponentInternal<ProjectM.Network.NetworkSnapshotType>(_entity);
        public bool TileModelLayer => _world.EntityManager.HasComponentInternal<ProjectM.Tiles.TileModelLayer>(_entity);
        public ProjectM.BuffResistances? BuffResistances => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BuffResistances>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderHealthThreshhold_DataServer? Script_ApplyBuffUnderHealthThreshhold_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderHealthThreshhold_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Buffable? Buffable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Buffable>(_entity, out var value) ? value : null;
        public ProjectM.CreatedTime? CreatedTime => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CreatedTime>(_entity, out var value) ? value : null;
        public ProjectM.Health? Health => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Health>(_entity, out var value) ? value : null;
        public ProjectM.HealthConstants? HealthConstants => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HealthConstants>(_entity, out var value) ? value : null;
        public ProjectM.Immortal? Immortal => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Immortal>(_entity, out var value) ? value : null;
        public ProjectM.CollisionRadius? CollisionRadius => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CollisionRadius>(_entity, out var value) ? value : null;
        public ProjectM.ArmorLevel? ArmorLevel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ArmorLevel>(_entity, out var value) ? value : null;
        public ProjectM.EntityCategory? EntityCategory => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EntityCategory>(_entity, out var value) ? value : null;
        public ProjectM.Immaterial? Immaterial => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Immaterial>(_entity, out var value) ? value : null;
        public ProjectM.Invulnerable? Invulnerable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Invulnerable>(_entity, out var value) ? value : null;
        public ProjectM.StaticTransformCompatible? StaticTransformCompatible => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StaticTransformCompatible>(_entity, out var value) ? value : null;
        public ProjectM.Sequencer.ImpactMaterial? ImpactMaterial => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Sequencer.ImpactMaterial>(_entity, out var value) ? value : null;
        public ProjectM.CastleDecayAndRegen? CastleDecayAndRegen => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleDecayAndRegen>(_entity, out var value) ? value : null;
        public ProjectM.StaticHierarchyData? StaticHierarchyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StaticHierarchyData>(_entity, out var value) ? value : null;
        public List<ProjectM.BoolModificationBuffer> BoolModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.BoolModificationBuffer>(_entity);
        public List<ProjectM.EntityModificationBuffer> EntityModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.EntityModificationBuffer>(_entity);
        public List<ProjectM.FloatModificationBuffer> FloatModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.FloatModificationBuffer>(_entity);
        public List<ProjectM.IntModificationBuffer> IntModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.IntModificationBuffer>(_entity);
        public List<ProjectM.StaticHierarchyBuffer> StaticHierarchyBuffers => _world.EntityManager.GetBufferInternal<ProjectM.StaticHierarchyBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleBuildingAttachToParentsBuffer> CastleBuildingAttachToParentsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleBuildingAttachToParentsBuffer>(_entity);
        public List<ProjectM.SharedGameplayConditionReference> SharedGameplayConditionReferences => _world.EntityManager.GetBufferInternal<ProjectM.SharedGameplayConditionReference>(_entity);
        public List<ProjectM.GameplayConditionGroup> GameplayConditionGroups => _world.EntityManager.GetBufferInternal<ProjectM.GameplayConditionGroup>(_entity);
        public List<ProjectM.GameplayCondition> GameplayConditions => _world.EntityManager.GetBufferInternal<ProjectM.GameplayCondition>(_entity);
        public List<ProjectM.CreateGameplayEventsOnSpawn> CreateGameplayEventsOnSpawns => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnSpawn>(_entity);
        public List<ProjectM.ApplyBuffOnGameplayEvent> ApplyBuffOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ApplyBuffOnGameplayEvent>(_entity);
        public List<ProjectM.ApplyBuffOnGameplayEventEntry> ApplyBuffOnGameplayEventEntries => _world.EntityManager.GetBufferInternal<ProjectM.ApplyBuffOnGameplayEventEntry>(_entity);
        public List<ProjectM.GameplayEventIdMapping> GameplayEventIdMappings => _world.EntityManager.GetBufferInternal<ProjectM.GameplayEventIdMapping>(_entity);
        public bool TileCollisionTag => _world.EntityManager.HasComponentInternal<ProjectM.TileCollisionTag>(_entity);
        public bool TilePathfindingTag => _world.EntityManager.HasComponentInternal<ProjectM.TilePathfindingTag>(_entity);
        public bool TileLineOfSightTag => _world.EntityManager.HasComponentInternal<ProjectM.TileLineOfSightTag>(_entity);
        public bool ScriptSpawn => _world.EntityManager.HasComponentInternal<ProjectM.Scripting.ScriptSpawn>(_entity);
        public bool MoveStopTrigger => _world.EntityManager.HasComponentInternal<ProjectM.MoveStopTrigger>(_entity);
        public ProjectM.ProgressionUserContentDependency? ProgressionUserContentDependency => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProgressionUserContentDependency>(_entity, out var value) ? value : null;
        public ProjectM.PavementBonusSource? PavementBonusSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PavementBonusSource>(_entity, out var value) ? value : null;
        public Unity.Transforms.Parent? Parent => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.Parent>(_entity, out var value) ? value : null;
        public ProjectM.RotateAroundAxis? RotateAroundAxis => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RotateAroundAxis>(_entity, out var value) ? value : null;
        public bool CastleBuildingShowOnlyInPreview => _world.EntityManager.HasComponentInternal<ProjectM.CastleBuilding.CastleBuildingShowOnlyInPreview>(_entity);
        public ProjectM.InventoryOwner? InventoryOwner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.InventoryOwner>(_entity, out var value) ? value : null;
        public ProjectM.Refinementstation? Refinementstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Refinementstation>(_entity, out var value) ? value : null;
        public ProjectM.WorkstationAssignedServant? WorkstationAssignedServant => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WorkstationAssignedServant>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleRoomConnection? CastleRoomConnection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleRoomConnection>(_entity, out var value) ? value : null;
        public ProjectM.ServantInteractPointLocalTransform? ServantInteractPointLocalTransform => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantInteractPointLocalTransform>(_entity, out var value) ? value : null;
        public ProjectM.StationServants? StationServants => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StationServants>(_entity, out var value) ? value : null;
        public ProjectM.CastleWorkstation? CastleWorkstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleWorkstation>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleBuildingAttachSettings? CastleBuildingAttachSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleBuildingAttachSettings>(_entity, out var value) ? value : null;
        public ProjectM.Interactable? Interactable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Interactable>(_entity, out var value) ? value : null;
        public ProjectM.InteractedUpon? InteractedUpon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.InteractedUpon>(_entity, out var value) ? value : null;
        public List<ProjectM.InventoryBuffer> InventoryBuffers => _world.EntityManager.GetBufferInternal<ProjectM.InventoryBuffer>(_entity);
        public List<ProjectM.StationBonusBuffer> StationBonusBuffers => _world.EntityManager.GetBufferInternal<ProjectM.StationBonusBuffer>(_entity);
        public List<ProjectM.RefinementstationRecipesBuffer> RefinementstationRecipesBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RefinementstationRecipesBuffer>(_entity);
        public List<ProjectM.InteractAbilityBuffer> InteractAbilityBuffers => _world.EntityManager.GetBufferInternal<ProjectM.InteractAbilityBuffer>(_entity);
        public bool TileHeightTag => _world.EntityManager.HasComponentInternal<ProjectM.TileHeightTag>(_entity);
        public bool PickParentTag => _world.EntityManager.HasComponentInternal<ProjectM.Physics.PickParentTag>(_entity);
        public bool WallpaperSet => _world.EntityManager.HasComponentInternal<ProjectM.WallpaperSet>(_entity);
        public ProjectM.Physics.PhysicsParent? PhysicsParent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Physics.PhysicsParent>(_entity, out var value) ? value : null;
        public List<ProjectM.DoorChildren> DoorChildrens => _world.EntityManager.GetBufferInternal<ProjectM.DoorChildren>(_entity);
        public bool ChildPrefabTag => _world.EntityManager.HasComponentInternal<ProjectM.ChildPrefabTag>(_entity);
        public ProjectM.NetherSpawnPosition? NetherSpawnPosition => _world.EntityManager.TryGetComponentDataInternal<ProjectM.NetherSpawnPosition>(_entity, out var value) ? value : null;
        public ProjectM.CastleLimited? CastleLimited => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleLimited>(_entity, out var value) ? value : null;
        public ProjectM.Hybrid.HybridModelSeed? HybridModelSeed => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Hybrid.HybridModelSeed>(_entity, out var value) ? value : null;
        public ProjectM.NameableInteractable? NameableInteractable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.NameableInteractable>(_entity, out var value) ? value : null;
        public ProjectM.PrisonCell? PrisonCell => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PrisonCell>(_entity, out var value) ? value : null;
        public ProjectM.EntityOwner? EntityOwner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EntityOwner>(_entity, out var value) ? value : null;
        public ProjectM.EntityCreator? EntityCreator => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EntityCreator>(_entity, out var value) ? value : null;
        public ProjectM.Prisonstation? Prisonstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Prisonstation>(_entity, out var value) ? value : null;
        public List<ProjectM.QueuedWorkstationCraftAction> QueuedWorkstationCraftActions => _world.EntityManager.GetBufferInternal<ProjectM.QueuedWorkstationCraftAction>(_entity);
        public List<ProjectM.QueuedWorkstationCraftActionItems> QueuedWorkstationCraftActionItems => _world.EntityManager.GetBufferInternal<ProjectM.QueuedWorkstationCraftActionItems>(_entity);
        public List<ProjectM.WorkstationRecipesBuffer> WorkstationRecipesBuffers => _world.EntityManager.GetBufferInternal<ProjectM.WorkstationRecipesBuffer>(_entity);
        public ProjectM.UserOwner? UserOwner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UserOwner>(_entity, out var value) ? value : null;
        public ProjectM.Pylonstation? Pylonstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Pylonstation>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleFloor? CastleFloor => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleFloor>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleFloorRoof? CastleFloorRoof => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleFloorRoof>(_entity, out var value) ? value : null;
        public ProjectM.MapPylonArea? MapPylonArea => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MapPylonArea>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleHeart? CastleHeart => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleHeart>(_entity, out var value) ? value : null;
        public ProjectM.DurabilityTarget? DurabilityTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DurabilityTarget>(_entity, out var value) ? value : null;
        public List<ProjectM.Restricted_InventoryBuffer> Restricted_InventoryBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Restricted_InventoryBuffer>(_entity);
        public List<ProjectM.AttachMapIconsToEntity> AttachMapIconsToEntities => _world.EntityManager.GetBufferInternal<ProjectM.AttachMapIconsToEntity>(_entity);
        public List<ProjectM.MapIconPerUserData> MapIconPerUserDatas => _world.EntityManager.GetBufferInternal<ProjectM.MapIconPerUserData>(_entity);
        public List<ProjectM.PylonstationUpgradesBuffer> PylonstationUpgradesBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PylonstationUpgradesBuffer>(_entity);
        public List<ProjectM.PylonstationCastleClaimBuffer> PylonstationCastleClaimBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PylonstationCastleClaimBuffer>(_entity);
        public List<ProjectM.PylonstationCastleDestroyBuffer> PylonstationCastleDestroyBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PylonstationCastleDestroyBuffer>(_entity);
        public bool MapIcon_Server => _world.EntityManager.HasComponentInternal<ProjectM.MapIcon_Server>(_entity);
        public bool TileCastleAreaTag => _world.EntityManager.HasComponentInternal<ProjectM.TileCastleAreaTag>(_entity);
        public List<ProjectM.ActiveServantMission> ActiveServantMissions => _world.EntityManager.GetBufferInternal<ProjectM.ActiveServantMission>(_entity);
        public List<ProjectM.ProgressionDependencyElement> ProgressionDependencyElements => _world.EntityManager.GetBufferInternal<ProjectM.ProgressionDependencyElement>(_entity);
        public ProjectM.Door? Door => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Door>(_entity, out var value) ? value : null;
        public bool AnnounceCastleAttack => _world.EntityManager.HasComponentInternal<ProjectM.AnnounceCastleAttack>(_entity);
        public bool AnnounceCastleBreached => _world.EntityManager.HasComponentInternal<ProjectM.AnnounceCastleBreached>(_entity);
        public ProjectM.BloodAltar? BloodAltar => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodAltar>(_entity, out var value) ? value : null;
        public List<ProjectM.BloodHuntBuffer> BloodHuntBuffers => _world.EntityManager.GetBufferInternal<ProjectM.BloodHuntBuffer>(_entity);
        public ProjectM.StartGraveyardExitWaypoint? StartGraveyardExitWaypoint => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StartGraveyardExitWaypoint>(_entity, out var value) ? value : null;
        public bool AlwaysNetworked => _world.EntityManager.HasComponentInternal<ProjectM.Network.AlwaysNetworked>(_entity);
        public ProjectM.CastleBuilding.CastleWall? CastleWall => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleWall>(_entity, out var value) ? value : null;
        public ProjectM.AoETargetImportance? AoETargetImportance => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AoETargetImportance>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.NetworkedPrefabChildren? NetworkedPrefabChildren => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.NetworkedPrefabChildren>(_entity, out var value) ? value : null;
        public ProjectM.RespawnPoint? RespawnPoint => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RespawnPoint>(_entity, out var value) ? value : null;
        public ProjectM.ChunkWaypoint? ChunkWaypoint => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChunkWaypoint>(_entity, out var value) ? value : null;
        public bool CastleWaypoint => _world.EntityManager.HasComponentInternal<ProjectM.CastleWaypoint>(_entity);
        public ProjectM.Residency? Residency => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Residency>(_entity, out var value) ? value : null;
        public ProjectM.LastTranslation? LastTranslation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LastTranslation>(_entity, out var value) ? value : null;
        public ProjectM.Network.OnlySyncToUserBitMask? OnlySyncToUserBitMask => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.OnlySyncToUserBitMask>(_entity, out var value) ? value : null;
        public List<ProjectM.StartItemBuffer> StartItemBuffers => _world.EntityManager.GetBufferInternal<ProjectM.StartItemBuffer>(_entity);
        public List<ProjectM.Network.OnlySyncToUserBuffer> OnlySyncToUserBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.OnlySyncToUserBuffer>(_entity);
        public bool InventoryStartItems => _world.EntityManager.HasComponentInternal<ProjectM.InventoryStartItems>(_entity);
        public bool StaticSceneTag => _world.EntityManager.HasComponentInternal<Unity.Entities.StaticSceneTag>(_entity);
        public bool SceneTag => _world.EntityManager.HasComponentInternal<Unity.Entities.SceneTag>(_entity);
        public List<Unity.Transforms.Child> Children => _world.EntityManager.GetBufferInternal<Unity.Transforms.Child>(_entity);
        public bool SceneSection => _world.EntityManager.HasComponentInternal<Unity.Entities.SceneSection>(_entity);
        public ProjectM.Wallpaper_NotSplit? Wallpaper_NotSplit => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Wallpaper_NotSplit>(_entity, out var value) ? value : null;
        public ProjectM.WallpaperStyles? WallpaperStyles => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WallpaperStyles>(_entity, out var value) ? value : null;
        public ProjectM.WallpaperForceDamaged? WallpaperForceDamaged => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WallpaperForceDamaged>(_entity, out var value) ? value : null;
        public List<ProjectM.CastleBuilding.CastleBuildingAttachmentActiveBuffsBuffer> CastleBuildingAttachmentActiveBuffsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleBuildingAttachmentActiveBuffsBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleBuildingAttachmentApplyBuff> CastleBuildingAttachmentApplyBuffs => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleBuildingAttachmentApplyBuff>(_entity);
        public Unity.Transforms.LocalToParent? LocalToParent => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.LocalToParent>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.WorldRegionPolygon? WorldRegionPolygon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.WorldRegionPolygon>(_entity, out var value) ? value : null;
        public Unity.Transforms.PreviousParent? PreviousParent => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.PreviousParent>(_entity, out var value) ? value : null;
        public List<ProjectM.Terrain.WorldRegionPolygonVertex> WorldRegionPolygonVertexes => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.WorldRegionPolygonVertex>(_entity);
        public ProjectM.Wallpaper_TwoSplits? Wallpaper_TwoSplits => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Wallpaper_TwoSplits>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.WallRoofOrnament? WallRoofOrnament => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.WallRoofOrnament>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.WaypointRegionPolygon? WaypointRegionPolygon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.WaypointRegionPolygon>(_entity, out var value) ? value : null;
        public List<Unity.Scenes.BundleElementData> BundleElementDatas => _world.EntityManager.GetBufferInternal<Unity.Scenes.BundleElementData>(_entity);
        public bool SceneSectionBundle => _world.EntityManager.HasComponentInternal<Unity.Scenes.SceneSectionBundle>(_entity);
        public ProjectM.Terrain.WorldZoneId? WorldZoneId => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.WorldZoneId>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.WorldZoneTextureProjectionMatrix? WorldZoneTextureProjectionMatrix => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.WorldZoneTextureProjectionMatrix>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.TerrainChunk? TerrainChunk => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.TerrainChunk>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.ChunkSceneId? ChunkSceneId => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.ChunkSceneId>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.BakedCollisionTilesBoundsRef? BakedCollisionTilesBoundsRef => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.BakedCollisionTilesBoundsRef>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.BakedLineOfSightTileDataBoundsRef? BakedLineOfSightTileDataBoundsRef => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.BakedLineOfSightTileDataBoundsRef>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.BakedPathfindingTileDataBoundsRef? BakedPathfindingTileDataBoundsRef => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.BakedPathfindingTileDataBoundsRef>(_entity, out var value) ? value : null;
        public List<ProjectM.ReplaceDropTableElement> ReplaceDropTableElements => _world.EntityManager.GetBufferInternal<ProjectM.ReplaceDropTableElement>(_entity);
        public List<ProjectM.ReplaceRandomizedSpawnChainElement> ReplaceRandomizedSpawnChainElements => _world.EntityManager.GetBufferInternal<ProjectM.ReplaceRandomizedSpawnChainElement>(_entity);
        public List<ProjectM.StaticTransformElement> StaticTransformElements => _world.EntityManager.GetBufferInternal<ProjectM.StaticTransformElement>(_entity);
        public List<ProjectM.Terrain.ControllableAreaIdBuffer> ControllableAreaIdBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.ControllableAreaIdBuffer>(_entity);
        public List<ProjectM.Terrain.ChunkBaseGameplayHeights> ChunkBaseGameplayHeights => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.ChunkBaseGameplayHeights>(_entity);
        public List<ProjectM.Terrain.ChunkGameplayHeights> ChunkGameplayHeights => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.ChunkGameplayHeights>(_entity);
        public List<ProjectM.Terrain.ChunkTileCollision> ChunkTileCollisions => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.ChunkTileCollision>(_entity);
        public List<ProjectM.Terrain.ChunkLineOfSight> ChunkLineOfSights => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.ChunkLineOfSight>(_entity);
        public List<ProjectM.Pathfinding.PathfindingTerrainDataElement1> PathfindingTerrainDataElement1 => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.PathfindingTerrainDataElement1>(_entity);
        public List<ProjectM.Pathfinding.PathfindingTerrainDataElement2> PathfindingTerrainDataElement2 => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.PathfindingTerrainDataElement2>(_entity);
        public List<ProjectM.Tiles.BakedCollisionTiles> BakedCollisionTiles => _world.EntityManager.GetBufferInternal<ProjectM.Tiles.BakedCollisionTiles>(_entity);
        public List<ProjectM.Tiles.BakedLineOfSightTiles> BakedLineOfSightTiles => _world.EntityManager.GetBufferInternal<ProjectM.Tiles.BakedLineOfSightTiles>(_entity);
        public List<ProjectM.Tiles.BakedPlacementTiles> BakedPlacementTiles => _world.EntityManager.GetBufferInternal<ProjectM.Tiles.BakedPlacementTiles>(_entity);
        public List<ProjectM.Tiles.BakedPlacementTilesBounds> BakedPlacementTilesBounds => _world.EntityManager.GetBufferInternal<ProjectM.Tiles.BakedPlacementTilesBounds>(_entity);
        public List<ProjectM.Tiles.BakedPathfindingTileData> BakedPathfindingTileDatas => _world.EntityManager.GetBufferInternal<ProjectM.Tiles.BakedPathfindingTileData>(_entity);
        public bool Static => _world.EntityManager.HasComponentInternal<Unity.Transforms.Static>(_entity);
        public bool TerrainTag => _world.EntityManager.HasComponentInternal<ProjectM.Terrain.TerrainTag>(_entity);
        public bool MakeStaticOnLoad => _world.EntityManager.HasComponentInternal<ProjectM.Terrain.MakeStaticOnLoad>(_entity);
        public bool TerrainChunkShared => _world.EntityManager.HasComponentInternal<ProjectM.Terrain.TerrainChunkShared>(_entity);
        public bool StaticTileModel => _world.EntityManager.HasComponentInternal<ProjectM.Tiles.StaticTileModel>(_entity);
        public Unity.Transforms.NonUniformScale? NonUniformScale => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.NonUniformScale>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.ProcessChunkTask? ProcessChunkTask => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.ProcessChunkTask>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.LoadTerrainChunkRequest? LoadTerrainChunkRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.LoadTerrainChunkRequest>(_entity, out var value) ? value : null;
        public ProjectM.Wallpaper_FourSplits? Wallpaper_FourSplits => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Wallpaper_FourSplits>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.TerrainChunkMetadata? TerrainChunkMetadata => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.TerrainChunkMetadata>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.ChunkRoadGraph? ChunkRoadGraph => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.ChunkRoadGraph>(_entity, out var value) ? value : null;
        public List<ProjectM.Terrain.TerrainChunkPortalBuffer> TerrainChunkPortalBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.TerrainChunkPortalBuffer>(_entity);
        public List<ProjectM.Terrain.MapZoneNameOverride> MapZoneNameOverrides => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.MapZoneNameOverride>(_entity);
        public List<ProjectM.Terrain.MapIconNameOverride> MapIconNameOverrides => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.MapIconNameOverride>(_entity);
        public ProjectM.UpgradeableFromTileModel? UpgradeableFromTileModel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UpgradeableFromTileModel>(_entity, out var value) ? value : null;
        public ProjectM.Shared.Relic? Relic => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shared.Relic>(_entity, out var value) ? value : null;
        public List<ProjectM.DropTableBuffer> DropTableBuffers => _world.EntityManager.GetBufferInternal<ProjectM.DropTableBuffer>(_entity);
        public bool DropTable => _world.EntityManager.HasComponentInternal<ProjectM.DropTable>(_entity);
        public bool DropTableOnDeath => _world.EntityManager.HasComponentInternal<ProjectM.DropTableOnDeath>(_entity);
        public bool DropTableOnDestroy => _world.EntityManager.HasComponentInternal<ProjectM.DropTableOnDestroy>(_entity);
        public ProjectM.ChunkWaypointMetadata? ChunkWaypointMetadata => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChunkWaypointMetadata>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.MapZoneDataPacked? MapZoneDataPacked => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.MapZoneDataPacked>(_entity, out var value) ? value : null;
        public ProjectM.ChunkScenePortalMetadata? ChunkScenePortalMetadata => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChunkScenePortalMetadata>(_entity, out var value) ? value : null;
        public ProjectM.NetherSpawnPositionMetadata? NetherSpawnPositionMetadata => _world.EntityManager.TryGetComponentDataInternal<ProjectM.NetherSpawnPositionMetadata>(_entity, out var value) ? value : null;
        public ProjectM.Attach? Attach => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Attach>(_entity, out var value) ? value : null;
        public ProjectM.Buff? Buff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Buff>(_entity, out var value) ? value : null;
        public ProjectM.ReplaceAbilityOnSlotData? ReplaceAbilityOnSlotData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ReplaceAbilityOnSlotData>(_entity, out var value) ? value : null;
        public ProjectM.BuffCategory? BuffCategory => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BuffCategory>(_entity, out var value) ? value : null;
        public ProjectM.SpellLevel? SpellLevel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpellLevel>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_BloodKey_SenseCastle_SharedData? Script_BloodKey_SenseCastle_SharedData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_BloodKey_SenseCastle_SharedData>(_entity, out var value) ? value : null;
        public List<ProjectM.ModifyUnitStatBuff_DOTS> ModifyUnitStatBuff_DOTS => _world.EntityManager.GetBufferInternal<ProjectM.ModifyUnitStatBuff_DOTS>(_entity);
        public List<ProjectM.ReplaceAbilityOnSlotBuff> ReplaceAbilityOnSlotBuffs => _world.EntityManager.GetBufferInternal<ProjectM.ReplaceAbilityOnSlotBuff>(_entity);
        public List<ProjectM.Gameplay.Scripting.Script_BloodKey_SenseCastle_Entry> Script_BloodKey_SenseCastle_Entry => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_BloodKey_SenseCastle_Entry>(_entity);
        public bool Buff_Persists_Through_Death => _world.EntityManager.HasComponentInternal<ProjectM.Buff_Persists_Through_Death>(_entity);
        public bool ScriptUpdate => _world.EntityManager.HasComponentInternal<ProjectM.Scripting.ScriptUpdate>(_entity);
        public ProjectM.Age? Age => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Age>(_entity, out var value) ? value : null;
        public ProjectM.Scripting.ScriptDestroy? ScriptDestroy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Scripting.ScriptDestroy>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_ModifyDynamicCollision_DataServer? Script_Buff_ModifyDynamicCollision_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_ModifyDynamicCollision_DataServer>(_entity, out var value) ? value : null;
        public bool InCombatBuff => _world.EntityManager.HasComponentInternal<ProjectM.InCombatBuff>(_entity);
        public bool UseCombatAnimationState => _world.EntityManager.HasComponentInternal<ProjectM.UseCombatAnimationState>(_entity);
        public ProjectM.DisableAggroBuff? DisableAggroBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DisableAggroBuff>(_entity, out var value) ? value : null;
        public ProjectM.SpawnPrefabOnDestroy? SpawnPrefabOnDestroy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnPrefabOnDestroy>(_entity, out var value) ? value : null;
        public bool HideTargetHUD => _world.EntityManager.HasComponentInternal<ProjectM.HideTargetHUD>(_entity);
        public bool ImmaterialBuff => _world.EntityManager.HasComponentInternal<ProjectM.ImmaterialBuff>(_entity);
        public bool InvulnerableBuff => _world.EntityManager.HasComponentInternal<ProjectM.InvulnerableBuff>(_entity);
        public bool AbilityCastImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.AbilityCastImpairBuff>(_entity);
        public bool DisableDynamicCollisionBuff => _world.EntityManager.HasComponentInternal<ProjectM.DisableDynamicCollisionBuff>(_entity);
        public bool DisableMapCollisionBuff => _world.EntityManager.HasComponentInternal<ProjectM.DisableMapCollisionBuff>(_entity);
        public bool MovementImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.MovementImpairBuff>(_entity);
        public bool RotationImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.RotationImpairBuff>(_entity);
        public List<ProjectM.HealOnGameplayEvent> HealOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.HealOnGameplayEvent>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Buff_TrueForm_DataServer? Script_Buff_TrueForm_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_TrueForm_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.LifeTime? LifeTime => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LifeTime>(_entity, out var value) ? value : null;
        public ProjectM.ModifyBloodDrainBuff? ModifyBloodDrainBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyBloodDrainBuff>(_entity, out var value) ? value : null;
        public ProjectM.SetOwnerRotateTowardsMouse? SetOwnerRotateTowardsMouse => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SetOwnerRotateTowardsMouse>(_entity, out var value) ? value : null;
        public ProjectM.Description? Description => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Description>(_entity, out var value) ? value : null;
        public bool GetOwnerTeamOnSpawn => _world.EntityManager.HasComponentInternal<ProjectM.GetOwnerTeamOnSpawn>(_entity);
        public bool ImmuneToSunBuff => _world.EntityManager.HasComponentInternal<ProjectM.ImmuneToSunBuff>(_entity);
        public List<ProjectM.CreateGameplayEventsOnTick> CreateGameplayEventsOnTicks => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnTick>(_entity);
        public List<ProjectM.RunScriptOnGameplayEvent> RunScriptOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.RunScriptOnGameplayEvent>(_entity);
        public ProjectM.CloudCookie? CloudCookie => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CloudCookie>(_entity, out var value) ? value : null;
        public bool CloudLight => _world.EntityManager.HasComponentInternal<ProjectM.CloudLight>(_entity);
        public ProjectM.Gameplay.Scripting.RadialZone_Environment_Data? RadialZone_Environment_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.RadialZone_Environment_Data>(_entity, out var value) ? value : null;
        public List<ProjectM.Scripting.HashedTypesBuffer> HashedTypesBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Scripting.HashedTypesBuffer>(_entity);
        public List<ProjectM.Gameplay.Scripting.RadialZone_Environment_HitSpheres> RadialZone_Environment_HitSpheres => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.RadialZone_Environment_HitSpheres>(_entity);
        public bool HolyArea => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.Scripting.HolyArea>(_entity);
        public bool Disabled => _world.EntityManager.HasComponentInternal<Unity.Entities.Disabled>(_entity);
        public bool DisabledDueToNoPlayersInRange => _world.EntityManager.HasComponentInternal<ProjectM.DisabledDueToNoPlayersInRange>(_entity);
        public bool GarlicArea => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.Scripting.GarlicArea>(_entity);
        public ProjectM.CastleBuilding.CurrentTileModelEditing? CurrentTileModelEditing => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CurrentTileModelEditing>(_entity, out var value) ? value : null;
        public bool CanBuildTileModels => _world.EntityManager.HasComponentInternal<ProjectM.CastleBuilding.CanBuildTileModels>(_entity);
        public Unity.Transforms.CompositeScale? CompositeScale => _world.EntityManager.TryGetComponentDataInternal<Unity.Transforms.CompositeScale>(_entity, out var value) ? value : null;
        public ProjectM.ManagedItemSet? ManagedItemSet => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ManagedItemSet>(_entity, out var value) ? value : null;
        public ProjectM.FeatureCollectionComponent? FeatureCollectionComponent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FeatureCollectionComponent>(_entity, out var value) ? value : null;
        public ProjectM.ManagedItemData? ManagedItemData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ManagedItemData>(_entity, out var value) ? value : null;
        public bool GameDataInitializedSingleton => _world.EntityManager.HasComponentInternal<ProjectM.GameDataInitializedSingleton>(_entity);
        public ProjectM.Sequencer.SpawnSequenceForEntity? SpawnSequenceForEntity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Sequencer.SpawnSequenceForEntity>(_entity, out var value) ? value : null;
        public ProjectM.DestroyWhenNoCharacterNearbyAfterDuration? DestroyWhenNoCharacterNearbyAfterDuration => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyWhenNoCharacterNearbyAfterDuration>(_entity, out var value) ? value : null;
        public ProjectM.ItemPickup? ItemPickup => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ItemPickup>(_entity, out var value) ? value : null;
        public ProjectM.PlaySequenceOnPickup? PlaySequenceOnPickup => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlaySequenceOnPickup>(_entity, out var value) ? value : null;
        public ProjectM.PlayerDeathContainer? PlayerDeathContainer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlayerDeathContainer>(_entity, out var value) ? value : null;
        public ProjectM.DestroyAfterDuration? DestroyAfterDuration => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyAfterDuration>(_entity, out var value) ? value : null;
        public ProjectM.FallToHeight? FallToHeight => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FallToHeight>(_entity, out var value) ? value : null;
        public ProjectM.Height? Height => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Height>(_entity, out var value) ? value : null;
        public bool DestroyWhenInventoryIsEmpty => _world.EntityManager.HasComponentInternal<ProjectM.DestroyWhenInventoryIsEmpty>(_entity);
        public ProjectM.SiegeWeapon? SiegeWeapon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SiegeWeapon>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventsOnDestroy> CreateGameplayEventsOnDestroys => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnDestroy>(_entity);
        public List<ProjectM.CreateGameplayEventsOnTimePassed> CreateGameplayEventsOnTimePasseds => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnTimePassed>(_entity);
        public List<ProjectM.DestroyOnGameplayEvent> DestroyOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.DestroyOnGameplayEvent>(_entity);
        public bool AnnounceSiegeWeapon => _world.EntityManager.HasComponentInternal<ProjectM.AnnounceSiegeWeapon>(_entity);
        public List<ProjectM.AchievementInProgressElement> AchievementInProgressElements => _world.EntityManager.GetBufferInternal<ProjectM.AchievementInProgressElement>(_entity);
        public List<ProjectM.AchievementClaimedElement> AchievementClaimedElements => _world.EntityManager.GetBufferInternal<ProjectM.AchievementClaimedElement>(_entity);
        public List<ProjectM.TeamAllies> TeamAllies => _world.EntityManager.GetBufferInternal<ProjectM.TeamAllies>(_entity);
        public bool CastleTeam => _world.EntityManager.HasComponentInternal<ProjectM.CastleBuilding.CastleTeam>(_entity);
        public ProjectM.ProgressionMapper? ProgressionMapper => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProgressionMapper>(_entity, out var value) ? value : null;
        public ProjectM.EntityInput? EntityInput => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EntityInput>(_entity, out var value) ? value : null;
        public ProjectM.Controller? Controller => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Controller>(_entity, out var value) ? value : null;
        public ProjectM.Network.User? User => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.User>(_entity, out var value) ? value : null;
        public ProjectM.Network.InputCommandDataProxy? InputCommandDataProxy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.InputCommandDataProxy>(_entity, out var value) ? value : null;
        public ProjectM.AchievementOwner? AchievementOwner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AchievementOwner>(_entity, out var value) ? value : null;
        public ProjectM.CurrentMapZone? CurrentMapZone => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CurrentMapZone>(_entity, out var value) ? value : null;
        public ProjectM.ClanRole? ClanRole => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ClanRole>(_entity, out var value) ? value : null;
        public ProjectM.CryptSelection? CryptSelection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CryptSelection>(_entity, out var value) ? value : null;
        public ProjectM.Emoter? Emoter => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Emoter>(_entity, out var value) ? value : null;
        public ProjectM.UserHealth? UserHealth => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UserHealth>(_entity, out var value) ? value : null;
        public ProjectM.Shapeshift? Shapeshift => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shapeshift>(_entity, out var value) ? value : null;
        public ProjectM.Terrain.CurrentWorldRegion? CurrentWorldRegion => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Terrain.CurrentWorldRegion>(_entity, out var value) ? value : null;
        public ProjectM.Network.Latency? Latency => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.Latency>(_entity, out var value) ? value : null;
        public ProjectM.Network.ServerNetworkState? ServerNetworkState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.ServerNetworkState>(_entity, out var value) ? value : null;
        public ProjectM.Network.DisconnectedTimer? DisconnectedTimer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.DisconnectedTimer>(_entity, out var value) ? value : null;
        public ProjectM.Network.UserHeartCount? UserHeartCount => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.UserHeartCount>(_entity, out var value) ? value : null;
        public ProjectM.Experience? Experience => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Experience>(_entity, out var value) ? value : null;
        public List<ProjectM.AllyPermission> AllyPermissions => _world.EntityManager.GetBufferInternal<ProjectM.AllyPermission>(_entity);
        public List<ProjectM.UnlockedWaypointElement> UnlockedWaypointElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedWaypointElement>(_entity);
        public List<ProjectM.Network.InputCommandBufferElement> InputCommandBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.InputCommandBufferElement>(_entity);
        public List<ProjectM.RespawnPointOwnerBuffer> RespawnPointOwnerBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RespawnPointOwnerBuffer>(_entity);
        public List<ProjectM.UserMapZoneElement> UserMapZoneElements => _world.EntityManager.GetBufferInternal<ProjectM.UserMapZoneElement>(_entity);
        public List<ProjectM.Network.IncomingClientMessage> IncomingClientMessages => _world.EntityManager.GetBufferInternal<ProjectM.Network.IncomingClientMessage>(_entity);
        public List<ProjectM.Network.IncomingNetBuffer> IncomingNetBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.IncomingNetBuffer>(_entity);
        public List<ProjectM.Network.UserNetBuffer> UserNetBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.UserNetBuffer>(_entity);
        public List<ProjectM.Network.PriorityEntitiesToSerializeBuffer> PriorityEntitiesToSerializeBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.PriorityEntitiesToSerializeBuffer>(_entity);
        public List<ProjectM.Network.PanicEntitiesToSerializeBuffer> PanicEntitiesToSerializeBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Network.PanicEntitiesToSerializeBuffer>(_entity);
        public List<ProjectM.Network.UserEntityNetworkState> UserEntityNetworkStates => _world.EntityManager.GetBufferInternal<ProjectM.Network.UserEntityNetworkState>(_entity);
        public List<ProjectM.Network.TileCollisionHistoryElement> TileCollisionHistoryElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.TileCollisionHistoryElement>(_entity);
        public List<ProjectM.Network.TileGameplayHeightsHistoryElement> TileGameplayHeightsHistoryElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.TileGameplayHeightsHistoryElement>(_entity);
        public List<ProjectM.Network.TileCollisionHistoryMetadataElement> TileCollisionHistoryMetadataElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.TileCollisionHistoryMetadataElement>(_entity);
        public List<ProjectM.Network.TileDisabledCollisionHistoryElement> TileDisabledCollisionHistoryElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.TileDisabledCollisionHistoryElement>(_entity);
        public List<ProjectM.Network.InputCommandStateHistoryBufferElement> InputCommandStateHistoryBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.InputCommandStateHistoryBufferElement>(_entity);
        public List<ProjectM.DefaultAction> DefaultActions => _world.EntityManager.GetBufferInternal<ProjectM.DefaultAction>(_entity);
        public List<ProjectM.EmoteAbility> EmoteAbilities => _world.EntityManager.GetBufferInternal<ProjectM.EmoteAbility>(_entity);
        public List<ProjectM.ShapeshiftAbility> ShapeshiftAbilities => _world.EntityManager.GetBufferInternal<ProjectM.ShapeshiftAbility>(_entity);
        public bool NeutralTeam => _world.EntityManager.HasComponentInternal<ProjectM.NeutralTeam>(_entity);
        public ProjectM.ClanTeam? ClanTeam => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ClanTeam>(_entity, out var value) ? value : null;
        public bool UnitTeam => _world.EntityManager.HasComponentInternal<ProjectM.UnitTeam>(_entity);
        public ProjectM.UserTeam? UserTeam => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UserTeam>(_entity, out var value) ? value : null;
        public ProjectM.ItemData? ItemData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ItemData>(_entity, out var value) ? value : null;
        public ProjectM.Shared.Salvageable? Salvageable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shared.Salvageable>(_entity, out var value) ? value : null;
        public ProjectM.CastAbilityOnConsume? CastAbilityOnConsume => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastAbilityOnConsume>(_entity, out var value) ? value : null;
        public List<ProjectM.RecipeRequirementBuffer> RecipeRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RecipeRequirementBuffer>(_entity);
        public List<ProjectM.ConsumableCondition> ConsumableConditions => _world.EntityManager.GetBufferInternal<ProjectM.ConsumableCondition>(_entity);
        public List<ProjectM.RequiredProgressionToConsume> RequiredProgressionToConsumes => _world.EntityManager.GetBufferInternal<ProjectM.RequiredProgressionToConsume>(_entity);
        public List<ProjectM.ProgressionBookRecipeElement> ProgressionBookRecipeElements => _world.EntityManager.GetBufferInternal<ProjectM.ProgressionBookRecipeElement>(_entity);
        public List<ProjectM.ProgressionBookTechElement> ProgressionBookTechElements => _world.EntityManager.GetBufferInternal<ProjectM.ProgressionBookTechElement>(_entity);
        public List<ProjectM.ProgressionBookBlueprintElement> ProgressionBookBlueprintElements => _world.EntityManager.GetBufferInternal<ProjectM.ProgressionBookBlueprintElement>(_entity);
        public List<ProjectM.ProgressionBookShapeshiftElement> ProgressionBookShapeshiftElements => _world.EntityManager.GetBufferInternal<ProjectM.ProgressionBookShapeshiftElement>(_entity);
        public bool InventoryItem => _world.EntityManager.HasComponentInternal<ProjectM.InventoryItem>(_entity);
        public ProjectM.NetworkedSpawnChainChild? NetworkedSpawnChainChild => _world.EntityManager.TryGetComponentDataInternal<ProjectM.NetworkedSpawnChainChild>(_entity, out var value) ? value : null;
        public ProjectM.SpellMovement? SpellMovement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpellMovement>(_entity, out var value) ? value : null;
        public ProjectM.ServerDebugViewData? ServerDebugViewData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerDebugViewData>(_entity, out var value) ? value : null;
        public ProjectM.ModifyMovementSpeedBuff? ModifyMovementSpeedBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyMovementSpeedBuff>(_entity, out var value) ? value : null;
        public bool ProgressionGain => _world.EntityManager.HasComponentInternal<ProjectM.ProgressionGain>(_entity);
        public ProjectM.Dash? Dash => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Dash>(_entity, out var value) ? value : null;
        public ProjectM.DashSpawn? DashSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DashSpawn>(_entity, out var value) ? value : null;
        public ProjectM.GetOwnerRotation? GetOwnerRotation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GetOwnerRotation>(_entity, out var value) ? value : null;
        public ProjectM.GetOwnerTranslationOnSpawn? GetOwnerTranslationOnSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GetOwnerTranslationOnSpawn>(_entity, out var value) ? value : null;
        public bool GetOwnerRotationOnlyOnSpawnTag => _world.EntityManager.HasComponentInternal<ProjectM.GetOwnerRotationOnlyOnSpawnTag>(_entity);
        public ProjectM.SyncedServerDebugSettings? SyncedServerDebugSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SyncedServerDebugSettings>(_entity, out var value) ? value : null;
        public ProjectM.MapIconData? MapIconData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MapIconData>(_entity, out var value) ? value : null;
        public ProjectM.MapIconTargetEntity? MapIconTargetEntity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MapIconTargetEntity>(_entity, out var value) ? value : null;
        public ProjectM.MapIconPosition? MapIconPosition => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MapIconPosition>(_entity, out var value) ? value : null;
        public ProjectM.TeamBoundMapIcon? TeamBoundMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TeamBoundMapIcon>(_entity, out var value) ? value : null;
        public ProjectM.ProgressionGainXPLevelWisdom? ProgressionGainXPLevelWisdom => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProgressionGainXPLevelWisdom>(_entity, out var value) ? value : null;
        public List<ProjectM.PlaySequenceOnGameplayEvent> PlaySequenceOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.PlaySequenceOnGameplayEvent>(_entity);
        public ProjectM.Equippable? Equippable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Equippable>(_entity, out var value) ? value : null;
        public ProjectM.EquippableData? EquippableData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EquippableData>(_entity, out var value) ? value : null;
        public ProjectM.HeadgearToggleData? HeadgearToggleData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HeadgearToggleData>(_entity, out var value) ? value : null;
        public ProjectM.SunDamageDebuff? SunDamageDebuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SunDamageDebuff>(_entity, out var value) ? value : null;
        public ProjectM.DeathBuff? DeathBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DeathBuff>(_entity, out var value) ? value : null;
        public ProjectM.WeaponLevelSource? WeaponLevelSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WeaponLevelSource>(_entity, out var value) ? value : null;
        public ProjectM.Shared.Durability? Durability => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shared.Durability>(_entity, out var value) ? value : null;
        public List<ProjectM.ReplaceAbilityOnSlotWhenMountedBuffElement> ReplaceAbilityOnSlotWhenMountedBuffElements => _world.EntityManager.GetBufferInternal<ProjectM.ReplaceAbilityOnSlotWhenMountedBuffElement>(_entity);
        public List<ProjectM.ReplaceAbilityOnSlotWhenMountedBuffModificationElement> ReplaceAbilityOnSlotWhenMountedBuffModificationElements => _world.EntityManager.GetBufferInternal<ProjectM.ReplaceAbilityOnSlotWhenMountedBuffModificationElement>(_entity);
        public ProjectM.AbilityGroupSlot? AbilityGroupSlot => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupSlot>(_entity, out var value) ? value : null;
        public bool StaticPhysicsCollider => _world.EntityManager.HasComponentInternal<ProjectM.Shared.StaticPhysicsCollider>(_entity);
        public bool Script_Summon_Castle_Location_Tag => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.Scripting.Script_Summon_Castle_Location_Tag>(_entity);
        public ProjectM.LimitOnePerUser? LimitOnePerUser => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LimitOnePerUser>(_entity, out var value) ? value : null;
        public ProjectM.SpawnPhysicsObjectOnDeath? SpawnPhysicsObjectOnDeath => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnPhysicsObjectOnDeath>(_entity, out var value) ? value : null;
        public ProjectM.RepairstationData? RepairstationData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RepairstationData>(_entity, out var value) ? value : null;
        public ProjectM.Repairstation? Repairstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Repairstation>(_entity, out var value) ? value : null;
        public List<ProjectM.RepairRequirementBuffer> RepairRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RepairRequirementBuffer>(_entity);
        public ProjectM.UnitSpawnerstation? UnitSpawnerstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitSpawnerstation>(_entity, out var value) ? value : null;
        public List<ProjectM.SpawnedUnitsBuffer> SpawnedUnitsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.SpawnedUnitsBuffer>(_entity);
        public List<ProjectM.UnitSpawnPointBuffer> UnitSpawnPointBuffers => _world.EntityManager.GetBufferInternal<ProjectM.UnitSpawnPointBuffer>(_entity);
        public bool RelicRadar => _world.EntityManager.HasComponentInternal<ProjectM.RelicRadar>(_entity);
        public ProjectM.ResearchStation? ResearchStation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ResearchStation>(_entity, out var value) ? value : null;
        public List<ProjectM.DiscoverCostBuffer> DiscoverCostBuffers => _world.EntityManager.GetBufferInternal<ProjectM.DiscoverCostBuffer>(_entity);
        public List<ProjectM.ResearchBuffer> ResearchBuffers => _world.EntityManager.GetBufferInternal<ProjectM.ResearchBuffer>(_entity);
        public ProjectM.ServantCoffinstation? ServantCoffinstation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantCoffinstation>(_entity, out var value) ? value : null;
        public ProjectM.ServantCoffinEffects? ServantCoffinEffects => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantCoffinEffects>(_entity, out var value) ? value : null;
        public ProjectM.Bonfire? Bonfire => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Bonfire>(_entity, out var value) ? value : null;
        public ProjectM.BurnContainer? BurnContainer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BurnContainer>(_entity, out var value) ? value : null;
        public ProjectM.Salvagestation? Salvagestation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Salvagestation>(_entity, out var value) ? value : null;
        public List<ProjectM.Behaviours.CastOptionBuffer> CastOptionBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.CastOptionBuffer>(_entity);
        public List<ProjectM.UnitLevelDamageSettings> UnitLevelDamageSettings => _world.EntityManager.GetBufferInternal<ProjectM.UnitLevelDamageSettings>(_entity);
        public List<ProjectM.SpawnMinionOnGameplayEventSpawnBuffElement> SpawnMinionOnGameplayEventSpawnBuffElements => _world.EntityManager.GetBufferInternal<ProjectM.SpawnMinionOnGameplayEventSpawnBuffElement>(_entity);
        public List<ProjectM.Behaviours.CastOptionGroupBuffer> CastOptionGroupBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.CastOptionGroupBuffer>(_entity);
        public List<ProjectM.SpawnPrefabOnGameplayEvent> SpawnPrefabOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.SpawnPrefabOnGameplayEvent>(_entity);
        public ProjectM.SpellTarget? SpellTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpellTarget>(_entity, out var value) ? value : null;
        public bool DestroyOnSpawn => _world.EntityManager.HasComponentInternal<ProjectM.DestroyOnSpawn>(_entity);
        public bool BindCoffin => _world.EntityManager.HasComponentInternal<ProjectM.BindCoffin>(_entity);
        public List<ProjectM.RemoveBuffOnGameplayEvent> RemoveBuffOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.RemoveBuffOnGameplayEvent>(_entity);
        public List<ProjectM.RemoveBuffOnGameplayEventEntry> RemoveBuffOnGameplayEventEntries => _world.EntityManager.GetBufferInternal<ProjectM.RemoveBuffOnGameplayEventEntry>(_entity);
        public List<ProjectM.DealDamageOnGameplayEvent> DealDamageOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.DealDamageOnGameplayEvent>(_entity);
        public ProjectM.Knockback? Knockback => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Knockback>(_entity, out var value) ? value : null;
        public ProjectM.ChangeKnockbackResistanceBuff? ChangeKnockbackResistanceBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChangeKnockbackResistanceBuff>(_entity, out var value) ? value : null;
        public bool BlockEquipmentSwapping => _world.EntityManager.HasComponentInternal<ProjectM.BlockEquipmentSwapping>(_entity);
        public bool AbilityTargetSource => _world.EntityManager.HasComponentInternal<ProjectM.AbilityTargetSource>(_entity);
        public List<ProjectM.CreateGameplayEventsOnHit> CreateGameplayEventsOnHits => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnHit>(_entity);
        public List<ProjectM.ChangeBloodOnGameplayEvent> ChangeBloodOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ChangeBloodOnGameplayEvent>(_entity);
        public List<ProjectM.TransformBuffTargetOnGameplayEvent> TransformBuffTargetOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.TransformBuffTargetOnGameplayEvent>(_entity);
        public bool ServerControlsPositionBuff => _world.EntityManager.HasComponentInternal<ProjectM.ServerControlsPositionBuff>(_entity);
        public bool Buff_Destroy_On_Owner_Death => _world.EntityManager.HasComponentInternal<ProjectM.Buff_Destroy_On_Owner_Death>(_entity);
        public bool DecayOnServerTick => _world.EntityManager.HasComponentInternal<ProjectM.DecayOnServerTick>(_entity);
        public List<ProjectM.HitTrigger> HitTriggers => _world.EntityManager.GetBufferInternal<ProjectM.HitTrigger>(_entity);
        public List<ProjectM.HitColliderCast> HitColliderCasts => _world.EntityManager.GetBufferInternal<ProjectM.HitColliderCast>(_entity);
        public List<ProjectM.SpawnMinionOnGameplayEvent> SpawnMinionOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.SpawnMinionOnGameplayEvent>(_entity);
        public ProjectM.SetOwnerRotateTowardsMovement? SetOwnerRotateTowardsMovement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SetOwnerRotateTowardsMovement>(_entity, out var value) ? value : null;
        public bool MountInitBuff => _world.EntityManager.HasComponentInternal<ProjectM.MountInitBuff>(_entity);
        public bool RegenOnServerTick => _world.EntityManager.HasComponentInternal<ProjectM.RegenOnServerTick>(_entity);
        public ProjectM.ModifyRotation? ModifyRotation => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyRotation>(_entity, out var value) ? value : null;
        public List<ProjectM.PlayBlinkSequenceOnGameplayEvent> PlayBlinkSequenceOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.PlayBlinkSequenceOnGameplayEvent>(_entity);
        public List<ProjectM.PlayImpactOnGameplayEvent> PlayImpactOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.PlayImpactOnGameplayEvent>(_entity);
        public bool HasResidentBuff => _world.EntityManager.HasComponentInternal<ProjectM.HasResidentBuff>(_entity);
        public bool InsideInitBuff => _world.EntityManager.HasComponentInternal<ProjectM.InsideInitBuff>(_entity);
        public ProjectM.TargetAoE? TargetAoE => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TargetAoE>(_entity, out var value) ? value : null;
        public ProjectM.RagdollForceSource? RagdollForceSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RagdollForceSource>(_entity, out var value) ? value : null;
        public bool YieldResourceDisable => _world.EntityManager.HasComponentInternal<ProjectM.YieldResourceDisable>(_entity);
        public ProjectM.UsePortal? UsePortal => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UsePortal>(_entity, out var value) ? value : null;
        public ProjectM.Velocity? Velocity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Velocity>(_entity, out var value) ? value : null;
        public ProjectM.TargetDirection? TargetDirection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TargetDirection>(_entity, out var value) ? value : null;
        public ProjectM.EntityAimData? EntityAimData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EntityAimData>(_entity, out var value) ? value : null;
        public ProjectM.MoveVelocity? MoveVelocity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MoveVelocity>(_entity, out var value) ? value : null;
        public List<ProjectM.Float3ModificationBuffer> Float3ModificationBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Float3ModificationBuffer>(_entity);
        public ProjectM.InteractPickup? InteractPickup => _world.EntityManager.TryGetComponentDataInternal<ProjectM.InteractPickup>(_entity, out var value) ? value : null;
        public bool OpenDoor => _world.EntityManager.HasComponentInternal<ProjectM.OpenDoor>(_entity);
        public List<ProjectM.Behaviours.CastOptionStateBuffer> CastOptionStateBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.CastOptionStateBuffer>(_entity);
        public bool UnlockWaypoint => _world.EntityManager.HasComponentInternal<ProjectM.UnlockWaypoint>(_entity);
        public ProjectM.ModifyAggroRangesBuff? ModifyAggroRangesBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyAggroRangesBuff>(_entity, out var value) ? value : null;
        public ProjectM.AbilityTarget? AbilityTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityTarget>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventOnDamageTaken> CreateGameplayEventOnDamageTakens => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventOnDamageTaken>(_entity);
        public ProjectM.Hybrid.DeathRagdollForce? DeathRagdollForce => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Hybrid.DeathRagdollForce>(_entity, out var value) ? value : null;
        public ProjectM.HideWeapon? HideWeapon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HideWeapon>(_entity, out var value) ? value : null;
        public bool GrabBuff => _world.EntityManager.HasComponentInternal<ProjectM.GrabBuff>(_entity);
        public ProjectM.CastleResistanceBuff? CastleResistanceBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleResistanceBuff>(_entity, out var value) ? value : null;
        public ProjectM.AdjustFlyHeightBuff? AdjustFlyHeightBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AdjustFlyHeightBuff>(_entity, out var value) ? value : null;
        public bool GetOwnerFactionOnSpawn => _world.EntityManager.HasComponentInternal<ProjectM.GetOwnerFactionOnSpawn>(_entity);
        public ProjectM.WeaponLevel? WeaponLevel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WeaponLevel>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTreeBlackboardSize? BehaviourTreeBlackboardSize => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTreeBlackboardSize>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTree? BehaviourTree => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTree>(_entity, out var value) ? value : null;
        public List<ProjectM.Behaviours.BehaviourTreeBlackboardEntityFieldElement> BehaviourTreeBlackboardEntityFieldElements => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.BehaviourTreeBlackboardEntityFieldElement>(_entity);
        public List<ProjectM.Behaviours.BehaviourTreeBlackboardDebugElement> BehaviourTreeBlackboardDebugElements => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.BehaviourTreeBlackboardDebugElement>(_entity);
        public List<ProjectM.ApplyKnockbackOnGameplayEvent> ApplyKnockbackOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ApplyKnockbackOnGameplayEvent>(_entity);
        public List<ProjectM.TriggerCounterOnGameplayEvent> TriggerCounterOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.TriggerCounterOnGameplayEvent>(_entity);
        public List<ProjectM.TriggerDirectionalShieldOnGameplayEvent> TriggerDirectionalShieldOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.TriggerDirectionalShieldOnGameplayEvent>(_entity);
        public bool YieldResourceSource => _world.EntityManager.HasComponentInternal<ProjectM.YieldResourceSource>(_entity);
        public List<ProjectM.TargetAOESequence> TargetAOESequences => _world.EntityManager.GetBufferInternal<ProjectM.TargetAOESequence>(_entity);
        public ProjectM.AbilityState? AbilityState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityState>(_entity, out var value) ? value : null;
        public ProjectM.ModifyRotationDuringCast? ModifyRotationDuringCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyRotationDuringCast>(_entity, out var value) ? value : null;
        public ProjectM.AbilityInterruptData? AbilityInterruptData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityInterruptData>(_entity, out var value) ? value : null;
        public ProjectM.AbilityCooldownState? AbilityCooldownState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCooldownState>(_entity, out var value) ? value : null;
        public ProjectM.AbilityCooldownData? AbilityCooldownData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCooldownData>(_entity, out var value) ? value : null;
        public ProjectM.GlobalCooldown? GlobalCooldown => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GlobalCooldown>(_entity, out var value) ? value : null;
        public ProjectM.AbilityIgnoreSettings? AbilityIgnoreSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityIgnoreSettings>(_entity, out var value) ? value : null;
        public ProjectM.AbilityPriority? AbilityPriority => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityPriority>(_entity, out var value) ? value : null;
        public ProjectM.AbilityCastTimeData? AbilityCastTimeData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCastTimeData>(_entity, out var value) ? value : null;
        public List<ProjectM.AbilitySpawnPrefabOnCast> AbilitySpawnPrefabOnCasts => _world.EntityManager.GetBufferInternal<ProjectM.AbilitySpawnPrefabOnCast>(_entity);
        public List<ProjectM.AbilityCastCondition> AbilityCastConditions => _world.EntityManager.GetBufferInternal<ProjectM.AbilityCastCondition>(_entity);
        public ProjectM.WeakenBuff? WeakenBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WeakenBuff>(_entity, out var value) ? value : null;
        public ProjectM.AbilityDirectionInaccuracy? AbilityDirectionInaccuracy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityDirectionInaccuracy>(_entity, out var value) ? value : null;
        public ProjectM.ChangeKnockbackResistanceDuringCast? ChangeKnockbackResistanceDuringCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChangeKnockbackResistanceDuringCast>(_entity, out var value) ? value : null;
        public ProjectM.ModifyMovementDuringCastData? ModifyMovementDuringCastData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyMovementDuringCastData>(_entity, out var value) ? value : null;
        public ProjectM.MoveDuringCastData? MoveDuringCastData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MoveDuringCastData>(_entity, out var value) ? value : null;
        public ProjectM.AdditionalInteractBuff? AdditionalInteractBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AdditionalInteractBuff>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventsOnAbilityTrigger> CreateGameplayEventsOnAbilityTriggers => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnAbilityTrigger>(_entity);
        public List<ProjectM.CreateGameplayEventsOnAbilityTriggerAbilityPrefabTargets> CreateGameplayEventsOnAbilityTriggerAbilityPrefabTargets => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnAbilityTriggerAbilityPrefabTargets>(_entity);
        public ProjectM.Behaviours.AbilityRange? AbilityRange => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.AbilityRange>(_entity, out var value) ? value : null;
        public ProjectM.HideWeaponDuringCast? HideWeaponDuringCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HideWeaponDuringCast>(_entity, out var value) ? value : null;
        public bool AbilityHoldToCastData => _world.EntityManager.HasComponentInternal<ProjectM.AbilityHoldToCastData>(_entity);
        public bool BlockFeedBuff => _world.EntityManager.HasComponentInternal<ProjectM.BlockFeedBuff>(_entity);
        public bool IgnoreInCombatBuff => _world.EntityManager.HasComponentInternal<ProjectM.IgnoreInCombatBuff>(_entity);
        public ProjectM.AbsorbBuff? AbsorbBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbsorbBuff>(_entity, out var value) ? value : null;
        public bool MultiplyAbsorbCapBySpellPower => _world.EntityManager.HasComponentInternal<ProjectM.MultiplyAbsorbCapBySpellPower>(_entity);
        public ProjectM.AllowJumpFromCliffsBuff? AllowJumpFromCliffsBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AllowJumpFromCliffsBuff>(_entity, out var value) ? value : null;
        public ProjectM.EnergyRequirement? EnergyRequirement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EnergyRequirement>(_entity, out var value) ? value : null;
        public ProjectM.TravelBuff? TravelBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TravelBuff>(_entity, out var value) ? value : null;
        public ProjectM.TravelBuffSpawn? TravelBuffSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TravelBuffSpawn>(_entity, out var value) ? value : null;
        public bool DisableHeightCorrectionBuff => _world.EntityManager.HasComponentInternal<ProjectM.DisableHeightCorrectionBuff>(_entity);
        public ProjectM.DeathPvPTimer? DeathPvPTimer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DeathPvPTimer>(_entity, out var value) ? value : null;
        public ProjectM.Projectile? Projectile => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Projectile>(_entity, out var value) ? value : null;
        public ProjectM.ProjectileDestroyData? ProjectileDestroyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProjectileDestroyData>(_entity, out var value) ? value : null;
        public ProjectM.OffsetTranslationOnSpawn? OffsetTranslationOnSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.OffsetTranslationOnSpawn>(_entity, out var value) ? value : null;
        public ProjectM.ProjectileSnapToHeight? ProjectileSnapToHeight => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProjectileSnapToHeight>(_entity, out var value) ? value : null;
        public ProjectM.SpawnRandomLifeTime? SpawnRandomLifeTime => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnRandomLifeTime>(_entity, out var value) ? value : null;
        public ProjectM.LimitAbilityPriorityBuff? LimitAbilityPriorityBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LimitAbilityPriorityBuff>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventsOnAbilityImpaired> CreateGameplayEventsOnAbilityImpaireds => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnAbilityImpaired>(_entity);
        public List<ProjectM.ChangeEnergyOnGameplayEvent> ChangeEnergyOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ChangeEnergyOnGameplayEvent>(_entity);
        public ProjectM.DestroyBuffOnDamageTaken? DestroyBuffOnDamageTaken => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyBuffOnDamageTaken>(_entity, out var value) ? value : null;
        public ProjectM.AbilityOwner? AbilityOwner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityOwner>(_entity, out var value) ? value : null;
        public ProjectM.AbilityPositionInaccuracy? AbilityPositionInaccuracy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityPositionInaccuracy>(_entity, out var value) ? value : null;
        public ProjectM.TravelToTarget? TravelToTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TravelToTarget>(_entity, out var value) ? value : null;
        public List<ProjectM.ChangeAbilityOnGameplayEvent> ChangeAbilityOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ChangeAbilityOnGameplayEvent>(_entity);
        public List<ProjectM.ForceCastOnGameplayEvent> ForceCastOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.ForceCastOnGameplayEvent>(_entity);
        public ProjectM.AbilityAimPrediction? AbilityAimPrediction => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityAimPrediction>(_entity, out var value) ? value : null;
        public ProjectM.MoveStopAbilityData? MoveStopAbilityData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MoveStopAbilityData>(_entity, out var value) ? value : null;
        public ProjectM.SpawnSleepingBuff? SpawnSleepingBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnSleepingBuff>(_entity, out var value) ? value : null;
        public bool HolyAreaDebuff => _world.EntityManager.HasComponentInternal<ProjectM.HolyAreaDebuff>(_entity);
        public ProjectM.UI.GoToHUDMenu? GoToHUDMenu => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UI.GoToHUDMenu>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventOnItemEquipped> CreateGameplayEventOnItemEquippeds => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventOnItemEquipped>(_entity);
        public bool MoveTowardsRotationBuff => _world.EntityManager.HasComponentInternal<ProjectM.MoveTowardsRotationBuff>(_entity);
        public bool DestroyOnManualInterrupt => _world.EntityManager.HasComponentInternal<ProjectM.DestroyOnManualInterrupt>(_entity);
        public ProjectM.AmplifyBuff? AmplifyBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AmplifyBuff>(_entity, out var value) ? value : null;
        public ProjectM.ShapeshiftImpairBuff? ShapeshiftImpairBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ShapeshiftImpairBuff>(_entity, out var value) ? value : null;
        public ProjectM.DestroyBuffOnMove? DestroyBuffOnMove => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyBuffOnMove>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventOnLeaveCliff> CreateGameplayEventOnLeaveCliffs => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventOnLeaveCliff>(_entity);
        public List<ProjectM.AbilitySpawnPrefabOnStartCast> AbilitySpawnPrefabOnStartCasts => _world.EntityManager.GetBufferInternal<ProjectM.AbilitySpawnPrefabOnStartCast>(_entity);
        public ProjectM.DestroyOnAbilityCast? DestroyOnAbilityCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyOnAbilityCast>(_entity, out var value) ? value : null;
        public ProjectM.RadialDamageDebuff? RadialDamageDebuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RadialDamageDebuff>(_entity, out var value) ? value : null;
        public ProjectM.TeleportBuff? TeleportBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TeleportBuff>(_entity, out var value) ? value : null;
        public ProjectM.FadeToBlack? FadeToBlack => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FadeToBlack>(_entity, out var value) ? value : null;
        public ProjectM.FadeToBlack_Manual? FadeToBlack_Manual => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FadeToBlack_Manual>(_entity, out var value) ? value : null;
        public bool KeepMountBuffOnAbilityImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.KeepMountBuffOnAbilityImpairBuff>(_entity);
        public List<ProjectM.LifeLeechOnGameplayEvent> LifeLeechOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.LifeLeechOnGameplayEvent>(_entity);
        public ProjectM.AllowJumpDuringCast? AllowJumpDuringCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AllowJumpDuringCast>(_entity, out var value) ? value : null;
        public ProjectM.AbsorbStackModifier? AbsorbStackModifier => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbsorbStackModifier>(_entity, out var value) ? value : null;
        public ProjectM.AbsorbCapStackModifier? AbsorbCapStackModifier => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbsorbCapStackModifier>(_entity, out var value) ? value : null;
        public bool GiveAchievementOnHit => _world.EntityManager.HasComponentInternal<ProjectM.GiveAchievementOnHit>(_entity);
        public ProjectM.VBloodAbilityReplaceBuff? VBloodAbilityReplaceBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodAbilityReplaceBuff>(_entity, out var value) ? value : null;
        public ProjectM.BlockHealBuff? BlockHealBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BlockHealBuff>(_entity, out var value) ? value : null;
        public ProjectM.ModifyTeamBuff? ModifyTeamBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyTeamBuff>(_entity, out var value) ? value : null;
        public bool FollowBuffOwner => _world.EntityManager.HasComponentInternal<ProjectM.FollowBuffOwner>(_entity);
        public bool PreventDisableBuff => _world.EntityManager.HasComponentInternal<ProjectM.PreventDisableBuff>(_entity);
        public ProjectM.RespawnDelay? RespawnDelay => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RespawnDelay>(_entity, out var value) ? value : null;
        public bool GallopBuff => _world.EntityManager.HasComponentInternal<ProjectM.GallopBuff>(_entity);
        public List<ProjectM.GenerateAggroOnGameplayEvent> GenerateAggroOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.GenerateAggroOnGameplayEvent>(_entity);
        public List<ProjectM.DropFromTablesOnGameplayEvent> DropFromTablesOnGameplayEvents => _world.EntityManager.GetBufferInternal<ProjectM.DropFromTablesOnGameplayEvent>(_entity);
        public ProjectM.EmpowerBuff? EmpowerBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.EmpowerBuff>(_entity, out var value) ? value : null;
        public bool FadeOutFlyMoodBuff => _world.EntityManager.HasComponentInternal<ProjectM.FadeOutFlyMoodBuff>(_entity);
        public ProjectM.ImprisonedBuff? ImprisonedBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ImprisonedBuff>(_entity, out var value) ? value : null;
        public bool ModifyObstacleFadeoutBuff => _world.EntityManager.HasComponentInternal<ProjectM.ModifyObstacleFadeoutBuff>(_entity);
        public ProjectM.AbilityRemoveBuffCategoryOnStartCast? AbilityRemoveBuffCategoryOnStartCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityRemoveBuffCategoryOnStartCast>(_entity, out var value) ? value : null;
        public ProjectM.RotateTowardsAimDirectionDuringCastData? RotateTowardsAimDirectionDuringCastData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RotateTowardsAimDirectionDuringCastData>(_entity, out var value) ? value : null;
        public ProjectM.Minion? Minion => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Minion>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventsOnDirectionalShieldTrigger> CreateGameplayEventsOnDirectionalShieldTriggers => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventsOnDirectionalShieldTrigger>(_entity);
        public ProjectM.SpawnTransform? SpawnTransform => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnTransform>(_entity, out var value) ? value : null;
        public ProjectM.UnitRespawnTime? UnitRespawnTime => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitRespawnTime>(_entity, out var value) ? value : null;
        public ProjectM.Network.NetworkedTimeout? NetworkedTimeout => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.NetworkedTimeout>(_entity, out var value) ? value : null;
        public ProjectM.IsSpellControlled? IsSpellControlled => _world.EntityManager.TryGetComponentDataInternal<ProjectM.IsSpellControlled>(_entity, out var value) ? value : null;
        public bool DropTableOnSalvageDestroy => _world.EntityManager.HasComponentInternal<ProjectM.DropTableOnSalvageDestroy>(_entity);
        public ProjectM.AggroConsumer? AggroConsumer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AggroConsumer>(_entity, out var value) ? value : null;
        public ProjectM.AiMove_Server? AiMove_Server => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiMove_Server>(_entity, out var value) ? value : null;
        public ProjectM.Pathfinding.LastPathRequest? LastPathRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Pathfinding.LastPathRequest>(_entity, out var value) ? value : null;
        public ProjectM.GainAggroByAlert? GainAggroByAlert => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GainAggroByAlert>(_entity, out var value) ? value : null;
        public ProjectM.GainAggroByVicinity? GainAggroByVicinity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GainAggroByVicinity>(_entity, out var value) ? value : null;
        public ProjectM.GainAlertByVicinity? GainAlertByVicinity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GainAlertByVicinity>(_entity, out var value) ? value : null;
        public ProjectM.AggroModifiers? AggroModifiers => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AggroModifiers>(_entity, out var value) ? value : null;
        public ProjectM.AlertModifiers? AlertModifiers => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AlertModifiers>(_entity, out var value) ? value : null;
        public ProjectM.AggroDamageHistoryConfig? AggroDamageHistoryConfig => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AggroDamageHistoryConfig>(_entity, out var value) ? value : null;
        public ProjectM.AiPrioritization_Data? AiPrioritization_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiPrioritization_Data>(_entity, out var value) ? value : null;
        public ProjectM.AiPrioritization_State? AiPrioritization_State => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiPrioritization_State>(_entity, out var value) ? value : null;
        public ProjectM.Aggroable? Aggroable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Aggroable>(_entity, out var value) ? value : null;
        public ProjectM.AiMoveSpeeds? AiMoveSpeeds => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiMoveSpeeds>(_entity, out var value) ? value : null;
        public ProjectM.Stealthable? Stealthable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Stealthable>(_entity, out var value) ? value : null;
        public ProjectM.Movement? Movement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Movement>(_entity, out var value) ? value : null;
        public ProjectM.MapCollision? MapCollision => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MapCollision>(_entity, out var value) ? value : null;
        public ProjectM.UnitLevel? UnitLevel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitLevel>(_entity, out var value) ? value : null;
        public ProjectM.Vision? Vision => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Vision>(_entity, out var value) ? value : null;
        public ProjectM.ResistanceData? ResistanceData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ResistanceData>(_entity, out var value) ? value : null;
        public ProjectM.UnitStats? UnitStats => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitStats>(_entity, out var value) ? value : null;
        public ProjectM.AiMove_Shared? AiMove_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiMove_Shared>(_entity, out var value) ? value : null;
        public ProjectM.MinionSpawnData? MinionSpawnData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MinionSpawnData>(_entity, out var value) ? value : null;
        public ProjectM.GenericCombatMovementData? GenericCombatMovementData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GenericCombatMovementData>(_entity, out var value) ? value : null;
        public ProjectM.MiscAiGameplayData? MiscAiGameplayData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MiscAiGameplayData>(_entity, out var value) ? value : null;
        public ProjectM.AiDebugDraw? AiDebugDraw => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AiDebugDraw>(_entity, out var value) ? value : null;
        public ProjectM.Pathfinding.Pathfinder? Pathfinder => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Pathfinding.Pathfinder>(_entity, out var value) ? value : null;
        public ProjectM.SpawnBuffIfPlayerInRange? SpawnBuffIfPlayerInRange => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnBuffIfPlayerInRange>(_entity, out var value) ? value : null;
        public ProjectM.DynamicCollision? DynamicCollision => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DynamicCollision>(_entity, out var value) ? value : null;
        public ProjectM.Network.NetworkInterpolated_Shared? NetworkInterpolated_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.NetworkInterpolated_Shared>(_entity, out var value) ? value : null;
        public List<ProjectM.AggroBuffer> AggroBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AggroBuffer>(_entity);
        public List<ProjectM.AlertBuffer> AlertBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AlertBuffer>(_entity);
        public List<ProjectM.AggroCandidateBufferElement> AggroCandidateBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.AggroCandidateBufferElement>(_entity);
        public List<ProjectM.AggroDamageHistoryBufferElement> AggroDamageHistoryBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.AggroDamageHistoryBufferElement>(_entity);
        public List<ProjectM.ExternalAggroBufferElement> ExternalAggroBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.ExternalAggroBufferElement>(_entity);
        public List<ProjectM.EntitiesInView_Server> EntitiesInView_Server => _world.EntityManager.GetBufferInternal<ProjectM.EntitiesInView_Server>(_entity);
        public List<ProjectM.Behaviours.BehaviourTreeStateActiveBuffsBuffer> BehaviourTreeStateActiveBuffsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.BehaviourTreeStateActiveBuffsBuffer>(_entity);
        public List<ProjectM.Behaviours.BehaviourTreeStateBuffsBuffer> BehaviourTreeStateBuffsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.BehaviourTreeStateBuffsBuffer>(_entity);
        public List<ProjectM.Pathfinding.PathBuffer> PathBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.PathBuffer>(_entity);
        public List<ProjectM.Pathfinding.PathRequestFilledSegmentBuffer> PathRequestFilledSegmentBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.PathRequestFilledSegmentBuffer>(_entity);
        public List<ProjectM.Pathfinding.PathRequestSolveDebugBuffer> PathRequestSolveDebugBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.PathRequestSolveDebugBuffer>(_entity);
        public List<ProjectM.Pathfinding.UnsmoothedPathBuffer> UnsmoothedPathBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Pathfinding.UnsmoothedPathBuffer>(_entity);
        public bool MoveEntity => _world.EntityManager.HasComponentInternal<ProjectM.MoveEntity>(_entity);
        public bool SnapToHeight => _world.EntityManager.HasComponentInternal<ProjectM.SnapToHeight>(_entity);
        public bool HideOutsideVision => _world.EntityManager.HasComponentInternal<ProjectM.HideOutsideVision>(_entity);
        public ProjectM.FactionReference? FactionReference => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FactionReference>(_entity, out var value) ? value : null;
        public List<ProjectM.PrefabGUIDModificationBuffer> PrefabGUIDModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PrefabGUIDModificationBuffer>(_entity);
        public List<ProjectM.PlaySequenceOnDeath> PlaySequenceOnDeaths => _world.EntityManager.GetBufferInternal<ProjectM.PlaySequenceOnDeath>(_entity);
        public ProjectM.AbilityGroupState? AbilityGroupState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupState>(_entity, out var value) ? value : null;
        public ProjectM.PlaceTilemodelAbility? PlaceTilemodelAbility => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlaceTilemodelAbility>(_entity, out var value) ? value : null;
        public List<ProjectM.AbilityStateBuffer> AbilityStateBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AbilityStateBuffer>(_entity);
        public List<ProjectM.AbilityGroupStartAbilitiesBuffer> AbilityGroupStartAbilitiesBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AbilityGroupStartAbilitiesBuffer>(_entity);
        public ProjectM.AbilityChargesState? AbilityChargesState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityChargesState>(_entity, out var value) ? value : null;
        public ProjectM.AbilityChargesData? AbilityChargesData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityChargesData>(_entity, out var value) ? value : null;
        public ProjectM.AbilityGroupComboState? AbilityGroupComboState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupComboState>(_entity, out var value) ? value : null;
        public ProjectM.AbilityGroupResetComboState? AbilityGroupResetComboState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupResetComboState>(_entity, out var value) ? value : null;
        public ProjectM.VBloodAbilityData? VBloodAbilityData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodAbilityData>(_entity, out var value) ? value : null;
        public ProjectM.AbilityGroupConsumeItemOnCast? AbilityGroupConsumeItemOnCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupConsumeItemOnCast>(_entity, out var value) ? value : null;
        public ProjectM.StoredBloodAbility? StoredBloodAbility => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StoredBloodAbility>(_entity, out var value) ? value : null;
        public bool VBloodEmoteData => _world.EntityManager.HasComponentInternal<ProjectM.VBloodEmoteData>(_entity);
        public ProjectM.DismantleAbility? DismantleAbility => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DismantleAbility>(_entity, out var value) ? value : null;
        public ProjectM.MagicSourceDurabilityRequirement? MagicSourceDurabilityRequirement => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MagicSourceDurabilityRequirement>(_entity, out var value) ? value : null;
        public ProjectM.RepairAbility? RepairAbility => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RepairAbility>(_entity, out var value) ? value : null;
        public ProjectM.Shared.IgnoreHitsPerTarget? IgnoreHitsPerTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shared.IgnoreHitsPerTarget>(_entity, out var value) ? value : null;
        public List<ProjectM.Shared.IgnoreHitsPerTargetElement> IgnoreHitsPerTargetElements => _world.EntityManager.GetBufferInternal<ProjectM.Shared.IgnoreHitsPerTargetElement>(_entity);
        public ProjectM.AbilityGroupGiveProgressionOnCast? AbilityGroupGiveProgressionOnCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityGroupGiveProgressionOnCast>(_entity, out var value) ? value : null;
        public ProjectM.Shared.DamageReductionPerTarget? DamageReductionPerTarget => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Shared.DamageReductionPerTarget>(_entity, out var value) ? value : null;
        public List<ProjectM.Shared.DamageReductionPerTargetElement> DamageReductionPerTargetElements => _world.EntityManager.GetBufferInternal<ProjectM.Shared.DamageReductionPerTargetElement>(_entity);
        public ProjectM.AbilityBar_Server? AbilityBar_Server => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityBar_Server>(_entity, out var value) ? value : null;
        public ProjectM.AbilityBar_Shared? AbilityBar_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityBar_Shared>(_entity, out var value) ? value : null;
        public ProjectM.AbilityBarInitializationState? AbilityBarInitializationState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityBarInitializationState>(_entity, out var value) ? value : null;
        public ProjectM.YieldXPOnDeath? YieldXPOnDeath => _world.EntityManager.TryGetComponentDataInternal<ProjectM.YieldXPOnDeath>(_entity, out var value) ? value : null;
        public ProjectM.WalkBackAndForth? WalkBackAndForth => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WalkBackAndForth>(_entity, out var value) ? value : null;
        public List<ProjectM.AbilityGroupSlotBuffer> AbilityGroupSlotBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AbilityGroupSlotBuffer>(_entity);
        public ProjectM.Follower? Follower => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Follower>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTreeInstance? BehaviourTreeInstance => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTreeInstance>(_entity, out var value) ? value : null;
        public ProjectM.Hideable? Hideable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Hideable>(_entity, out var value) ? value : null;
        public ProjectM.WoundedConstants? WoundedConstants => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WoundedConstants>(_entity, out var value) ? value : null;
        public ProjectM.CanPreventDisableWhenNoPlayersInRange? CanPreventDisableWhenNoPlayersInRange => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CanPreventDisableWhenNoPlayersInRange>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTreeBinding? BehaviourTreeBinding => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTreeBinding>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTreeState? BehaviourTreeState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTreeState>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.BehaviourTreeStateMetadata? BehaviourTreeStateMetadata => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.BehaviourTreeStateMetadata>(_entity, out var value) ? value : null;
        public List<Stunlock.Sequencer.BlackboardElement> BlackboardElements => _world.EntityManager.GetBufferInternal<Stunlock.Sequencer.BlackboardElement>(_entity);
        public List<ProjectM.Behaviours.BehaviourTreeNodeInstanceElement> BehaviourTreeNodeInstanceElements => _world.EntityManager.GetBufferInternal<ProjectM.Behaviours.BehaviourTreeNodeInstanceElement>(_entity);
        public bool CharmSource => _world.EntityManager.HasComponentInternal<ProjectM.CharmSource>(_entity);
        public ProjectM.CastHistoryData? CastHistoryData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastHistoryData>(_entity, out var value) ? value : null;
        public List<ProjectM.CastHistoryBufferElement> CastHistoryBufferElements => _world.EntityManager.GetBufferInternal<ProjectM.CastHistoryBufferElement>(_entity);
        public ProjectM.BloodConsumeSource? BloodConsumeSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodConsumeSource>(_entity, out var value) ? value : null;
        public ProjectM.TravelToTargetRadius? TravelToTargetRadius => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TravelToTargetRadius>(_entity, out var value) ? value : null;
        public List<ProjectM.RandomBloodTypeBuffer> RandomBloodTypeBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RandomBloodTypeBuffer>(_entity);
        public bool IgnorePvETag => _world.EntityManager.HasComponentInternal<ProjectM.IgnorePvETag>(_entity);
        public ProjectM.BloodBuff? BloodBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.AbilityProjectileFanOnGameplayEvent_DataServer? AbilityProjectileFanOnGameplayEvent_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.AbilityProjectileFanOnGameplayEvent_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_Brute_HealthRegenBonus? BloodBuffScript_Brute_HealthRegenBonus => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Brute_HealthRegenBonus>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.EvenSpreadCluster_Tick_DataServer? EvenSpreadCluster_Tick_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.EvenSpreadCluster_Tick_DataServer>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Throw_Prefabs_To_Spawn> Throw_Prefabs_To_Spawn => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Throw_Prefabs_To_Spawn>(_entity);
        public ProjectM.Gameplay.Scripting.AbilityThrowTowardsEventHitTarget_DataServer? AbilityThrowTowardsEventHitTarget_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.AbilityThrowTowardsEventHitTarget_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_Brute_NulifyAndEmpower? BloodBuffScript_Brute_NulifyAndEmpower => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Brute_NulifyAndEmpower>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.AbilityThrowMultipleWithSpreadOnTick_DataServer? AbilityThrowMultipleWithSpreadOnTick_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.AbilityThrowMultipleWithSpreadOnTick_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_Rogue_MountDamageBonus? BloodBuffScript_Rogue_MountDamageBonus => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Rogue_MountDamageBonus>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_Innocent_80? BloodBuffScript_Innocent_80 => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Innocent_80>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_SetAbilityCooldownOnGameplayEvent_DataServer? Script_SetAbilityCooldownOnGameplayEvent_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_SetAbilityCooldownOnGameplayEvent_DataServer>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_SCTChatOnSpawn_Buffer> Script_SCTChatOnSpawn_Buffer => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_SCTChatOnSpawn_Buffer>(_entity);
        public ProjectM.Gameplay.Scripting.Script_BouncingProjectile_DataServer? Script_BouncingProjectile_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_BouncingProjectile_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.SetDynamicCollisionHardnessBuff? SetDynamicCollisionHardnessBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SetDynamicCollisionHardnessBuff>(_entity, out var value) ? value : null;
        public ProjectM.Ticker? Ticker => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Ticker>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Gorgon_Venom_Debuff_DataServer? Script_Gorgon_Venom_Debuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Gorgon_Venom_Debuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Script_SalvageOnGameplayEventData? Script_SalvageOnGameplayEventData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Script_SalvageOnGameplayEventData>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ApplyExclusiveSiegeBuff_DataServer? Script_ApplyExclusiveSiegeBuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyExclusiveSiegeBuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_Shared? Script_DamageZone_SingleTarget_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_Shared>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_HitTarget> Script_DamageZone_SingleTarget_HitTarget => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_HitTarget>(_entity);
        public List<ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_HitConditions> Script_DamageZone_SingleTarget_HitConditions => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_DamageZone_SingleTarget_HitConditions>(_entity);
        public ProjectM.Gameplay.Scripting.Script_SilverDebuff_DataServer? Script_SilverDebuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_SilverDebuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.LaunchProjectileTowardsTargetOnGameplayEvent_DataServer? LaunchProjectileTowardsTargetOnGameplayEvent_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.LaunchProjectileTowardsTargetOnGameplayEvent_DataServer>(_entity, out var value) ? value : null;
        public bool AbilityChargeResetOnUse => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.Scripting.AbilityChargeResetOnUse>(_entity);
        public ProjectM.ServantEquipment? ServantEquipment => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantEquipment>(_entity, out var value) ? value : null;
        public ProjectM.ServantConnectedCoffin? ServantConnectedCoffin => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantConnectedCoffin>(_entity, out var value) ? value : null;
        public ProjectM.ServantData? ServantData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantData>(_entity, out var value) ? value : null;
        public ProjectM.ServantPower? ServantPower => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantPower>(_entity, out var value) ? value : null;
        public ProjectM.ServantPowerConstants? ServantPowerConstants => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantPowerConstants>(_entity, out var value) ? value : null;
        public ProjectM.ServantTypeData? ServantTypeData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantTypeData>(_entity, out var value) ? value : null;
        public ProjectM.NPCServantColorIndex? NPCServantColorIndex => _world.EntityManager.TryGetComponentDataInternal<ProjectM.NPCServantColorIndex>(_entity, out var value) ? value : null;
        public ProjectM.Torture? Torture => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Torture>(_entity, out var value) ? value : null;
        public ProjectM.YieldEssenceOnDeath? YieldEssenceOnDeath => _world.EntityManager.TryGetComponentDataInternal<ProjectM.YieldEssenceOnDeath>(_entity, out var value) ? value : null;
        public ProjectM.OpenDoors? OpenDoors => _world.EntityManager.TryGetComponentDataInternal<ProjectM.OpenDoors>(_entity, out var value) ? value : null;
        public ProjectM.ServantConvertable? ServantConvertable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantConvertable>(_entity, out var value) ? value : null;
        public List<ProjectM.OpenDoorsBuffer> OpenDoorsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.OpenDoorsBuffer>(_entity);
        public List<ProjectM.PerksBuffer> PerksBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PerksBuffer>(_entity);
        public List<ProjectM.ServantConvertRequirement> ServantConvertRequirements => _world.EntityManager.GetBufferInternal<ProjectM.ServantConvertRequirement>(_entity);
        public List<ProjectM.Gameplay.Scripting.Script_SCTChatOnAggro_Buffer> Script_SCTChatOnAggro_Buffer => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_SCTChatOnAggro_Buffer>(_entity);
        public List<ProjectM.YieldResourcesOnDamageTaken> YieldResourcesOnDamageTakens => _world.EntityManager.GetBufferInternal<ProjectM.YieldResourcesOnDamageTaken>(_entity);
        public bool YieldResourcesOnPickup => _world.EntityManager.HasComponentInternal<ProjectM.YieldResourcesOnPickup>(_entity);
        public ProjectM.GetOwnerPrimaryAggroTargetOnSpawn? GetOwnerPrimaryAggroTargetOnSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GetOwnerPrimaryAggroTargetOnSpawn>(_entity, out var value) ? value : null;
        public bool CombatMusicSource_Server => _world.EntityManager.HasComponentInternal<ProjectM.CombatMusicSource_Server>(_entity);
        public ProjectM.FeedableInventory? FeedableInventory => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FeedableInventory>(_entity, out var value) ? value : null;
        public ProjectM.Mountable? Mountable => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Mountable>(_entity, out var value) ? value : null;
        public List<ProjectM.CreateGameplayEventOnDeath> CreateGameplayEventOnDeaths => _world.EntityManager.GetBufferInternal<ProjectM.CreateGameplayEventOnDeath>(_entity);
        public ProjectM.VBloodUnit? VBloodUnit => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodUnit>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_GenerateAggro_DataServer? Script_Buff_GenerateAggro_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_GenerateAggro_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.RotateOverTimeData? RotateOverTimeData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.RotateOverTimeData>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Worker_Gallop_DataShared? BloodBuff_Worker_Gallop_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Worker_Gallop_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_100_DataShared? BloodBuff_Warrior_100_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_100_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Worker_Pulverize_DataShared? BloodBuff_Worker_Pulverize_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Worker_Pulverize_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysicalBonus_DataShared? BloodBuff_Warrior_PhysicalBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysicalBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysDamageBonus_DataShared? BloodBuff_Warrior_PhysDamageBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysDamageBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_ModifyAggroFactor_DataServer? Script_Buff_ModifyAggroFactor_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_ModifyAggroFactor_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Rogue_AttackSpeedBonus_DataShared? BloodBuff_Rogue_AttackSpeedBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Rogue_AttackSpeedBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_PrimaryAttackLifeLeech_DataShared? BloodBuff_PrimaryAttackLifeLeech_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_PrimaryAttackLifeLeech_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Innocent_0_DataShared? BloodBuff_Innocent_0_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Innocent_0_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_WeaponCooldown_DataShared? BloodBuff_Warrior_WeaponCooldown_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_WeaponCooldown_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Creature_SpeedBonus_DataShared? BloodBuff_Creature_SpeedBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Creature_SpeedBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Brute_100_DataShared? BloodBuff_Brute_100_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Brute_100_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellCritChanceBonus_DataShared? BloodBuff_Scholar_SpellCritChanceBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellCritChanceBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.EvenSpreadCluster_DataServer? EvenSpreadCluster_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.EvenSpreadCluster_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Modify_Combat_Movement_Buff_Data? Script_Modify_Combat_Movement_Buff_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Modify_Combat_Movement_Buff_Data>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Modify_Combat_Movement_Buff_State? Script_Modify_Combat_Movement_Buff_State => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Modify_Combat_Movement_Buff_State>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Satiated_DataShared? BloodBuff_Satiated_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Satiated_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffOnAggroListTarget_DataServer? Script_ApplyBuffOnAggroListTarget_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyBuffOnAggroListTarget_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Strength_DataShared? BloodBuff_Strength_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Strength_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_CritAmplifyProc_DataShared? BloodBuff_CritAmplifyProc_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_CritAmplifyProc_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Innocent_50_DataShared? BloodBuff_Innocent_50_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Innocent_50_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_HealthRegeneration_DataShared? BloodBuff_HealthRegeneration_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_HealthRegeneration_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Brute_RecoverOnKill_DataShared? BloodBuff_Brute_RecoverOnKill_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Brute_RecoverOnKill_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_PrisonInteract_DataServer? Script_PrisonInteract_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_PrisonInteract_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_FirstStrike? BloodBuffScript_FirstStrike => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_FirstStrike>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_DamageReduction_DataShared? BloodBuff_DamageReduction_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_DamageReduction_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_PowerMod_Stacking_DataServer? Script_Buff_PowerMod_Stacking_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_PowerMod_Stacking_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_Werewolf_AttackSpeed_DataServer? Script_Buff_Werewolf_AttackSpeed_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_Werewolf_AttackSpeed_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_DataShared? BloodBuff_Warrior_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_ChanceToResetCooldown? BloodBuffScript_ChanceToResetCooldown => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_ChanceToResetCooldown>(_entity, out var value) ? value : null;
        public bool RunScriptOnCastFinished => _world.EntityManager.HasComponentInternal<ProjectM.RunScriptOnCastFinished>(_entity);
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysCritDamageBonus_DataShared? BloodBuff_Warrior_PhysCritDamageBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_PhysCritDamageBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_WeatherResistant_DataShared? BloodBuff_WeatherResistant_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_WeatherResistant_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_SpellLifeLeech_DataShared? BloodBuff_SpellLifeLeech_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_SpellLifeLeech_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Convert_Item_OnConsume_DataServer? Script_Convert_Item_OnConsume_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Convert_Item_OnConsume_DataServer>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_Convert_Item_OnConsume_Entry> Script_Convert_Item_OnConsume_Entry => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_Convert_Item_OnConsume_Entry>(_entity);
        public ProjectM.BloodBuffScript_Worker_ReducedDurability? BloodBuffScript_Worker_ReducedDurability => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Worker_ReducedDurability>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Brute_ArmorLevelBonus_DataShared? BloodBuff_Brute_ArmorLevelBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Brute_ArmorLevelBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_WerewolfChieftain_ToggleGates_DataShared? Script_WerewolfChieftain_ToggleGates_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_WerewolfChieftain_ToggleGates_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellPowerBonus_DataShared? BloodBuff_Scholar_SpellPowerBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellPowerBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_SunResistance_DataShared? BloodBuff_SunResistance_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_SunResistance_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Brute_PhysLifeLeech_DataShared? BloodBuff_Brute_PhysLifeLeech_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Brute_PhysLifeLeech_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_PhysCritChanceBonus_DataShared? BloodBuff_PhysCritChanceBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_PhysCritChanceBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_ManaRegenBonus_DataShared? BloodBuff_Scholar_ManaRegenBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_ManaRegenBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_VBlood_0_DataShared? BloodBuff_VBlood_0_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_VBlood_0_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_MaxManaBonus_DataShared? BloodBuff_Scholar_MaxManaBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_MaxManaBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Worker_IncreaseYield_DataShared? BloodBuff_Worker_IncreaseYield_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Worker_IncreaseYield_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Frail_DataShared? BloodBuff_Frail_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Frail_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_DamageReduction_DataShared? BloodBuff_Warrior_DamageReduction_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_DamageReduction_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_ReducedTravelCooldown_DataShared? BloodBuff_ReducedTravelCooldown_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_ReducedTravelCooldown_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_HealReceivedProc_DataShared? BloodBuff_HealReceivedProc_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_HealReceivedProc_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.SpawnStructure_WeakenState_DataShared? SpawnStructure_WeakenState_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.SpawnStructure_WeakenState_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Warrior_WeaponLevelBonus_DataShared? BloodBuff_Warrior_WeaponLevelBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Warrior_WeaponLevelBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Unsteady_DataShared? BloodBuff_Unsteady_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Unsteady_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Rogue_SpeedBonus_DataShared? BloodBuff_Rogue_SpeedBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Rogue_SpeedBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Worker_100_DataShared? BloodBuff_Worker_100_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Worker_100_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Worker_ResourceDamageBonus_DataShared? BloodBuff_Worker_ResourceDamageBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Worker_ResourceDamageBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellCooldown_DataShared? BloodBuff_Scholar_SpellCooldown_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellCooldown_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellLevelBonus_DataShared? BloodBuff_Scholar_SpellLevelBonus_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Scholar_SpellLevelBonus_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Intelligence_DataShared? BloodBuff_Intelligence_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Intelligence_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_PrimaryProc_FreeCast_DataShared? BloodBuff_PrimaryProc_FreeCast_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_PrimaryProc_FreeCast_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.BloodBuffScript_Scholar_MovementSpeedOnCast? BloodBuffScript_Scholar_MovementSpeedOnCast => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodBuffScript_Scholar_MovementSpeedOnCast>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Rogue_100_DataShared? BloodBuff_Rogue_100_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Rogue_100_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Sorcerrer_DataShared? BloodBuff_Sorcerrer_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Sorcerrer_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnHitDetection_DataServer? Script_CreateGameplayEventOnHitDetection_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnHitDetection_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnTickRandomChance_DataServer? Script_CreateGameplayEventOnTickRandomChance_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnTickRandomChance_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.ScaleHealthByPlayerCountBuff? ScaleHealthByPlayerCountBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ScaleHealthByPlayerCountBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_Shapeshift_DataShared? Script_Buff_Shapeshift_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_Shapeshift_DataShared>(_entity, out var value) ? value : null;
        public bool BloodShareBuff => _world.EntityManager.HasComponentInternal<ProjectM.BloodShareBuff>(_entity);
        public bool BloodShareBuff_ResetVBlood => _world.EntityManager.HasComponentInternal<ProjectM.BloodShareBuff_ResetVBlood>(_entity);
        public bool RunScriptOnCastEnded => _world.EntityManager.HasComponentInternal<ProjectM.RunScriptOnCastEnded>(_entity);
        public ProjectM.Gameplay.Scripting.SpawnThrowFromBuff_DataServer? SpawnThrowFromBuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.SpawnThrowFromBuff_DataServer>(_entity, out var value) ? value : null;
        public bool RunScriptOnCastStarted => _world.EntityManager.HasComponentInternal<ProjectM.RunScriptOnCastStarted>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Gorgon_Rush_Consume_DataServer? Script_Gorgon_Rush_Consume_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Gorgon_Rush_Consume_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_VisionRangeModification_DataServer? Script_Buff_VisionRangeModification_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_VisionRangeModification_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Siphon_Blood_Buff_DataShared? Script_Siphon_Blood_Buff_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Siphon_Blood_Buff_DataShared>(_entity, out var value) ? value : null;
        public bool ConsumableImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.ConsumableImpairBuff>(_entity);
        public ProjectM.Gameplay.Scripting.RingAoE_DataShared? RingAoE_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.RingAoE_DataShared>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.HitList> HitLists => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.HitList>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Demount_DataServer? Script_Demount_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Demount_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.ModifyTargetHUDHeight? ModifyTargetHUDHeight => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyTargetHUDHeight>(_entity, out var value) ? value : null;
        public ProjectM.MountBuff? MountBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MountBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_AggroRangeFactor_DataShared? Script_Buff_AggroRangeFactor_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_AggroRangeFactor_DataShared>(_entity, out var value) ? value : null;
        public bool Hideable_CopyFromAttachParent => _world.EntityManager.HasComponentInternal<ProjectM.Hideable_CopyFromAttachParent>(_entity);
        public ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnAreaEnterExit_DataServer? Script_CreateGameplayEventOnAreaEnterExit_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnAreaEnterExit_DataServer>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnAreaEnterExit_Entry> Script_CreateGameplayEventOnAreaEnterExit_Entry => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnAreaEnterExit_Entry>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_DataServer? Script_Blood_CrimsonBeam_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_DataShared? Script_Blood_CrimsonBeam_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_DataShared>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_HitElement> Script_Blood_CrimsonBeam_HitElement => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_Blood_CrimsonBeam_HitElement>(_entity);
        public ProjectM.Gameplay.Scripting.Script_RemoveBuffOnAbilityUseData? Script_RemoveBuffOnAbilityUseData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_RemoveBuffOnAbilityUseData>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_MountSpeed_DataShared? Script_Buff_MountSpeed_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_MountSpeed_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_Assault_DataShared? BloodBuff_Assault_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_Assault_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_ModifyFaction_DataServer? Script_Buff_ModifyFaction_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_ModifyFaction_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffOnAllWithBuff_Cast_DataServer? Script_ApplyBuffOnAllWithBuff_Cast_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyBuffOnAllWithBuff_Cast_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_SetFlyingHeightVision_Buff_DataShared? Script_SetFlyingHeightVision_Buff_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_SetFlyingHeightVision_Buff_DataShared>(_entity, out var value) ? value : null;
        public bool CanFlyBuff => _world.EntityManager.HasComponentInternal<ProjectM.CanFlyBuff>(_entity);
        public bool AlwaysInSunBuff => _world.EntityManager.HasComponentInternal<ProjectM.AlwaysInSunBuff>(_entity);
        public bool FlyOnlyMapCollisionBuff => _world.EntityManager.HasComponentInternal<ProjectM.FlyOnlyMapCollisionBuff>(_entity);
        public bool BuildMenuImpairBuff => _world.EntityManager.HasComponentInternal<ProjectM.BuildMenuImpairBuff>(_entity);
        public ProjectM.Gameplay.Scripting.Script_MultiThrow_Cast_DataServer? Script_MultiThrow_Cast_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_MultiThrow_Cast_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ProjectileSpread_Channel_Data? Script_ProjectileSpread_Channel_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ProjectileSpread_Channel_Data>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_SpawnThrowTowardsNearbyVampires_DataServer? Script_SpawnThrowTowardsNearbyVampires_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_SpawnThrowTowardsNearbyVampires_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ClusterBomb_Cast_DataServer? Script_ClusterBomb_Cast_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ClusterBomb_Cast_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Script_ConfuseDummy_DataServer? Script_ConfuseDummy_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Script_ConfuseDummy_DataServer>(_entity, out var value) ? value : null;
        public List<ProjectM.Script_ConfuseDummy_BuffedEntitiesBuffer> Script_ConfuseDummy_BuffedEntitiesBuffer => _world.EntityManager.GetBufferInternal<ProjectM.Script_ConfuseDummy_BuffedEntitiesBuffer>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Buff_GrabToOwner_DataServer? Script_Buff_GrabToOwner_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_GrabToOwner_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_GrowingProjectile_DataServer? Script_GrowingProjectile_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_GrowingProjectile_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ToggleNearbyArmorRacks_DataShared? Script_ToggleNearbyArmorRacks_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ToggleNearbyArmorRacks_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_ModifyBuffResistances_DataServer? Script_Buff_ModifyBuffResistances_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_ModifyBuffResistances_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_MultiShot_Cast_DataServer? Script_MultiShot_Cast_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_MultiShot_Cast_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.InsideBuff? InsideBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.InsideBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.BloodBuff_CriticalStrikeOnNextAttack_DataShared? BloodBuff_CriticalStrikeOnNextAttack_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.BloodBuff_CriticalStrikeOnNextAttack_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_IgniteDebuff_DataServer? Script_IgniteDebuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_IgniteDebuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Roll_Jump_DataServer? Script_Roll_Jump_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Roll_Jump_DataServer>(_entity, out var value) ? value : null;
        public bool RunScriptOnCastUpdate => _world.EntityManager.HasComponentInternal<ProjectM.RunScriptOnCastUpdate>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Knockback_Wall_Buff_DataServer? Script_Knockback_Wall_Buff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Knockback_Wall_Buff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_Stealth_DataServer? Script_Buff_Stealth_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_Stealth_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Fly_CheckLanding_DataServer? Script_Fly_CheckLanding_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Fly_CheckLanding_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_BouncingProjectile_Delay_DataServer? Script_BouncingProjectile_Delay_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_BouncingProjectile_Delay_DataServer>(_entity, out var value) ? value : null;
        public bool UsePylonStation => _world.EntityManager.HasComponentInternal<ProjectM.UsePylonStation>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Wounded_DataShared? Script_Wounded_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Wounded_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Script_BloodAltar_TrackVBloodUnit_Shared? Script_BloodAltar_TrackVBloodUnit_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Script_BloodAltar_TrackVBloodUnit_Shared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_BloodAltar_TrackVBloodUnit_Server? Script_BloodAltar_TrackVBloodUnit_Server => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_BloodAltar_TrackVBloodUnit_Server>(_entity, out var value) ? value : null;
        public ProjectM.FortifyBuff? FortifyBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FortifyBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Summon_Castle_DataShared? Script_Summon_Castle_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Summon_Castle_DataShared>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_Summon_Castle_Entry> Script_Summon_Castle_Entry => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_Summon_Castle_Entry>(_entity);
        public ProjectM.AmplifyStackModifier? AmplifyStackModifier => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AmplifyStackModifier>(_entity, out var value) ? value : null;
        public ProjectM.WeakenStackModifier? WeakenStackModifier => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WeakenStackModifier>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_GarlicAreaDebuff_DataServer? Script_GarlicAreaDebuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_GarlicAreaDebuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_GarlicAreaDebuff_DataShared? Script_GarlicAreaDebuff_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_GarlicAreaDebuff_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_GarlicFeverDebuff_DataServer? Script_GarlicFeverDebuff_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_GarlicFeverDebuff_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_Spellblock_DataServer? Script_Buff_Spellblock_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_Spellblock_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_SetBuffTargetPositionToOwner_DataServer? Script_Buff_SetBuffTargetPositionToOwner_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_SetBuffTargetPositionToOwner_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.VampireDownedBuff? VampireDownedBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VampireDownedBuff>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnTickAfterDelay_DataServer? Script_CreateGameplayEventOnTickAfterDelay_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnTickAfterDelay_DataServer>(_entity, out var value) ? value : null;
        public bool DropItemImpairedBuff => _world.EntityManager.HasComponentInternal<ProjectM.DropItemImpairedBuff>(_entity);
        public bool EquipmentImpairedBuff => _world.EntityManager.HasComponentInternal<ProjectM.EquipmentImpairedBuff>(_entity);
        public bool ReviveCancelBuff => _world.EntityManager.HasComponentInternal<ProjectM.ReviveCancelBuff>(_entity);
        public bool DamagedEditableTile => _world.EntityManager.HasComponentInternal<ProjectM.DamagedEditableTile>(_entity);
        public ProjectM.Gameplay.Scripting.Script_PreCast_TakeFlight_DataServer? Script_PreCast_TakeFlight_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_PreCast_TakeFlight_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_DestroyBuffOnNoAbilityCharges_Server? Script_DestroyBuffOnNoAbilityCharges_Server => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_DestroyBuffOnNoAbilityCharges_Server>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_SpawnPrefabOnMiss_DataServer? Script_SpawnPrefabOnMiss_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_SpawnPrefabOnMiss_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Unholy_RaiseDead_DataServer? Script_Unholy_RaiseDead_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Unholy_RaiseDead_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ModifyBuffResistancesDuringCast_DataServer? Script_ModifyBuffResistancesDuringCast_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ModifyBuffResistancesDuringCast_DataServer>(_entity, out var value) ? value : null;
        public bool SiegeWeaponAbsorbCapByServerSettings => _world.EntityManager.HasComponentInternal<ProjectM.SiegeWeaponAbsorbCapByServerSettings>(_entity);
        public ProjectM.Gameplay.Scripting.Script_Buff_Stealth_Duration_DataServer? Script_Buff_Stealth_Duration_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_Stealth_Duration_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_BatformSCT_DataServer? Script_BatformSCT_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_BatformSCT_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_IgnoresPathfindingLineOfSight_DataServer? Script_Buff_IgnoresPathfindingLineOfSight_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_IgnoresPathfindingLineOfSight_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_Buff_PvPProtection_DataShared? Script_Buff_PvPProtection_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_Buff_PvPProtection_DataShared>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_UnitSpawn_DataServer? Script_UnitSpawn_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_UnitSpawn_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.LaunchProjectileFromKiller_DataServer? LaunchProjectileFromKiller_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.LaunchProjectileFromKiller_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.SpiderCocoon_DataShared? SpiderCocoon_DataShared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.SpiderCocoon_DataShared>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.SpiderCocoonSpawns_DataServer> SpiderCocoonSpawns_DataServer => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.SpiderCocoonSpawns_DataServer>(_entity);
        public ProjectM.MinionMaster? MinionMaster => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MinionMaster>(_entity, out var value) ? value : null;
        public ProjectM.VBloodConsumeSource? VBloodConsumeSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodConsumeSource>(_entity, out var value) ? value : null;
        public ProjectM.VBloodRewardSequence? VBloodRewardSequence => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodRewardSequence>(_entity, out var value) ? value : null;
        public List<ProjectM.MaxMinionsPerPlayerElement> MaxMinionsPerPlayerElements => _world.EntityManager.GetBufferInternal<ProjectM.MaxMinionsPerPlayerElement>(_entity);
        public List<ProjectM.VBloodUnlockTechBuffer> VBloodUnlockTechBuffers => _world.EntityManager.GetBufferInternal<ProjectM.VBloodUnlockTechBuffer>(_entity);
        public bool Script_SetHealthToOwnerPercentage_DataServer => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.Scripting.Script_SetHealthToOwnerPercentage_DataServer>(_entity);
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholds_DataServer? Script_ApplyBuffUnderThreeHealthThreshholds_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholds_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer? Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.CastAbilityInStateScript_DataServer? CastAbilityInStateScript_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.CastAbilityInStateScript_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.CanFly? CanFly => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CanFly>(_entity, out var value) ? value : null;
        public bool VisibleFromFlight => _world.EntityManager.HasComponentInternal<ProjectM.VisibleFromFlight>(_entity);
        public List<ProjectM.TechUnlockPassiveBuffer> TechUnlockPassiveBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechUnlockPassiveBuffer>(_entity);
        public ProjectM.Blood? Blood => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Blood>(_entity, out var value) ? value : null;
        public ProjectM.Equipment? Equipment => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Equipment>(_entity, out var value) ? value : null;
        public ProjectM.PlayerCharacter? PlayerCharacter => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlayerCharacter>(_entity, out var value) ? value : null;
        public ProjectM.ReturnToNetherWaypoint? ReturnToNetherWaypoint => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ReturnToNetherWaypoint>(_entity, out var value) ? value : null;
        public ProjectM.BloodMoonBuffState? BloodMoonBuffState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodMoonBuffState>(_entity, out var value) ? value : null;
        public ProjectM.Mounter? Mounter => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Mounter>(_entity, out var value) ? value : null;
        public ProjectM.Resident? Resident => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Resident>(_entity, out var value) ? value : null;
        public ProjectM.TakeDamageInSun? TakeDamageInSun => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TakeDamageInSun>(_entity, out var value) ? value : null;
        public ProjectM.TakeDamageInSunDebuffState? TakeDamageInSunDebuffState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TakeDamageInSunDebuffState>(_entity, out var value) ? value : null;
        public ProjectM.Interactor? Interactor => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Interactor>(_entity, out var value) ? value : null;
        public ProjectM.RespawnCharacter? RespawnCharacter => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RespawnCharacter>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnDamageDealtToEntityCategory_DataServer? Script_CreateGameplayEventOnDamageDealtToEntityCategory_DataServer => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_CreateGameplayEventOnDamageDealtToEntityCategory_DataServer>(_entity, out var value) ? value : null;
        public ProjectM.CustomizationFeatures? CustomizationFeatures => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CustomizationFeatures>(_entity, out var value) ? value : null;
        public ProjectM.Energy? Energy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Energy>(_entity, out var value) ? value : null;
        public ProjectM.PavementBonus? PavementBonus => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PavementBonus>(_entity, out var value) ? value : null;
        public ProjectM.VBloodAbilityOwnerData? VBloodAbilityOwnerData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodAbilityOwnerData>(_entity, out var value) ? value : null;
        public ProjectM.BloodMoonBuff? BloodMoonBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.BloodMoonBuff>(_entity, out var value) ? value : null;
        public ProjectM.KeepMountBuffOnAbilityImpair? KeepMountBuffOnAbilityImpair => _world.EntityManager.TryGetComponentDataInternal<ProjectM.KeepMountBuffOnAbilityImpair>(_entity, out var value) ? value : null;
        public ProjectM.LifeLeech? LifeLeech => _world.EntityManager.TryGetComponentDataInternal<ProjectM.LifeLeech>(_entity, out var value) ? value : null;
        public ProjectM.CombatMusicListener_Shared? CombatMusicListener_Shared => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CombatMusicListener_Shared>(_entity, out var value) ? value : null;
        public ProjectM.JumpFromCliffs? JumpFromCliffs => _world.EntityManager.TryGetComponentDataInternal<ProjectM.JumpFromCliffs>(_entity, out var value) ? value : null;
        public ProjectM.CharacterVoiceActivity? CharacterVoiceActivity => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CharacterVoiceActivity>(_entity, out var value) ? value : null;
        public ProjectM.Tiles.RestrictPlacementArea? RestrictPlacementArea => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Tiles.RestrictPlacementArea>(_entity, out var value) ? value : null;
        public List<ProjectM.FollowerBuffer> FollowerBuffers => _world.EntityManager.GetBufferInternal<ProjectM.FollowerBuffer>(_entity);
        public List<ProjectM.VBloodAbilityBuffEntry> VBloodAbilityBuffEntries => _world.EntityManager.GetBufferInternal<ProjectM.VBloodAbilityBuffEntry>(_entity);
        public List<ProjectM.CombatMusicListener_SourceElement> CombatMusicListener_SourceElement => _world.EntityManager.GetBufferInternal<ProjectM.CombatMusicListener_SourceElement>(_entity);
        public List<ProjectM.EquipmentSetBuff> EquipmentSetBuffs => _world.EntityManager.GetBufferInternal<ProjectM.EquipmentSetBuff>(_entity);
        public List<ProjectM.BloodQualityBuff> BloodQualityBuffs => _world.EntityManager.GetBufferInternal<ProjectM.BloodQualityBuff>(_entity);
        public List<ProjectM.BuffByItemCategoryCount> BuffByItemCategoryCounts => _world.EntityManager.GetBufferInternal<ProjectM.BuffByItemCategoryCount>(_entity);
        public List<ProjectM.BuffOnConnectionStatusElement> BuffOnConnectionStatusElements => _world.EntityManager.GetBufferInternal<ProjectM.BuffOnConnectionStatusElement>(_entity);
        public bool RadialDamageTarget => _world.EntityManager.HasComponentInternal<ProjectM.RadialDamageTarget>(_entity);
        public bool VampireTag => _world.EntityManager.HasComponentInternal<ProjectM.VampireTag>(_entity);
        public Unity.Physics.PhysicsMass? PhysicsMass => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsMass>(_entity, out var value) ? value : null;
        public Unity.Physics.PhysicsVelocity? PhysicsVelocity => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsVelocity>(_entity, out var value) ? value : null;
        public Unity.Physics.PhysicsDamping? PhysicsDamping => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsDamping>(_entity, out var value) ? value : null;
        public Unity.Physics.PhysicsGravityFactor? PhysicsGravityFactor => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsGravityFactor>(_entity, out var value) ? value : null;
        public ProjectM.Physics.PhysicsRubble? PhysicsRubble => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Physics.PhysicsRubble>(_entity, out var value) ? value : null;
        public ProjectM.DestroyAfterTimeOnInventoryChange? DestroyAfterTimeOnInventoryChange => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DestroyAfterTimeOnInventoryChange>(_entity, out var value) ? value : null;
        public ProjectM.DropInInventoryOnSpawn? DropInInventoryOnSpawn => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DropInInventoryOnSpawn>(_entity, out var value) ? value : null;
        public ProjectM.TransitionWhenInventoryIsEmpty? TransitionWhenInventoryIsEmpty => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TransitionWhenInventoryIsEmpty>(_entity, out var value) ? value : null;
        public ProjectM.UnitUptimeSetting? UnitUptimeSetting => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitUptimeSetting>(_entity, out var value) ? value : null;
        public ProjectM.RandomizedSpawnChainSettings? RandomizedSpawnChainSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RandomizedSpawnChainSettings>(_entity, out var value) ? value : null;
        public ProjectM.Roofs.RoofCategory? RoofCategory => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Roofs.RoofCategory>(_entity, out var value) ? value : null;
        public List<ProjectM.Roofs.RoofRootBlobElement> RoofRootBlobElements => _world.EntityManager.GetBufferInternal<ProjectM.Roofs.RoofRootBlobElement>(_entity);
        public List<ProjectM.Roofs.RoofTileVariations> RoofTileVariations => _world.EntityManager.GetBufferInternal<ProjectM.Roofs.RoofTileVariations>(_entity);
        public ProjectM.ChunkPortal? ChunkPortal => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChunkPortal>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleRoof? CastleRoof => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleRoof>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleRoofOrnaments? CastleRoofOrnaments => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleRoofOrnaments>(_entity, out var value) ? value : null;
        public ProjectM.Roofs.RoofTileData? RoofTileData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Roofs.RoofTileData>(_entity, out var value) ? value : null;
        public ProjectM.Roofs.RoofInstanceTypeId? RoofInstanceTypeId => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Roofs.RoofInstanceTypeId>(_entity, out var value) ? value : null;
        public ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_Data? Script_StealthBush_Environment_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_Data>(_entity, out var value) ? value : null;
        public List<ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_ActiveStealths> Script_StealthBush_Environment_ActiveStealths => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_ActiveStealths>(_entity);
        public List<ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_HitSpheres> Script_StealthBush_Environment_HitSpheres => _world.EntityManager.GetBufferInternal<ProjectM.Gameplay.Scripting.Script_StealthBush_Environment_HitSpheres>(_entity);
        public ProjectM.Gameplay.Script_InspectTarget_Data? Script_InspectTarget_Data => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Script_InspectTarget_Data>(_entity, out var value) ? value : null;
        public ProjectM.ServantMissionSettingsSingleton? ServantMissionSettingsSingleton => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServantMissionSettingsSingleton>(_entity, out var value) ? value : null;
        public List<ProjectM.ServantMissionSetting> ServantMissionSettings => _world.EntityManager.GetBufferInternal<ProjectM.ServantMissionSetting>(_entity);
        public List<ProjectM.ServantInjuredChance> ServantInjuredChances => _world.EntityManager.GetBufferInternal<ProjectM.ServantInjuredChance>(_entity);
        public List<ProjectM.ServantBloodTypePerkElement> ServantBloodTypePerkElements => _world.EntityManager.GetBufferInternal<ProjectM.ServantBloodTypePerkElement>(_entity);
        public List<ProjectM.ServantFactionPerkElement> ServantFactionPerkElements => _world.EntityManager.GetBufferInternal<ProjectM.ServantFactionPerkElement>(_entity);
        public bool ServantPerkCollectionSingleton => _world.EntityManager.HasComponentInternal<ProjectM.ServantPerkCollectionSingleton>(_entity);
        public Unity.Physics.PhysicsConstrainedBodyPair? PhysicsConstrainedBodyPair => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsConstrainedBodyPair>(_entity, out var value) ? value : null;
        public Unity.Physics.PhysicsJoint? PhysicsJoint => _world.EntityManager.TryGetComponentDataInternal<Unity.Physics.PhysicsJoint>(_entity, out var value) ? value : null;
        public List<Unity.Physics.PhysicsJointCompanion> PhysicsJointCompanions => _world.EntityManager.GetBufferInternal<Unity.Physics.PhysicsJointCompanion>(_entity);
        public ProjectM.HUD.BloodFountainPlacementFeedbackSettingsSingleton? BloodFountainPlacementFeedbackSettingsSingleton => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HUD.BloodFountainPlacementFeedbackSettingsSingleton>(_entity, out var value) ? value : null;
        public List<ProjectM.HUD.BloodFountainPlacementFeedbackLevel> BloodFountainPlacementFeedbackLevels => _world.EntityManager.GetBufferInternal<ProjectM.HUD.BloodFountainPlacementFeedbackLevel>(_entity);
        public ProjectM.CastleDestroyData? CastleDestroyData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleDestroyData>(_entity, out var value) ? value : null;
        public List<ProjectM.CastleDestroyRequirementBuffer> CastleDestroyRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleDestroyRequirementBuffer>(_entity);
        public ProjectM.CastleClaimData? CastleClaimData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleClaimData>(_entity, out var value) ? value : null;
        public List<ProjectM.CastleClaimRequirementBuffer> CastleClaimRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleClaimRequirementBuffer>(_entity);
        public ProjectM.CharacterCustomizationSettingsComponent? CharacterCustomizationSettingsComponent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CharacterCustomizationSettingsComponent>(_entity, out var value) ? value : null;
        public List<ProjectM.MaleFacesEntry> MaleFacesEntries => _world.EntityManager.GetBufferInternal<ProjectM.MaleFacesEntry>(_entity);
        public List<ProjectM.MaleHairsEntry> MaleHairsEntries => _world.EntityManager.GetBufferInternal<ProjectM.MaleHairsEntry>(_entity);
        public List<ProjectM.MaleFeaturesEntry> MaleFeaturesEntries => _world.EntityManager.GetBufferInternal<ProjectM.MaleFeaturesEntry>(_entity);
        public List<ProjectM.MaleAccessoriesEntry> MaleAccessoriesEntries => _world.EntityManager.GetBufferInternal<ProjectM.MaleAccessoriesEntry>(_entity);
        public List<ProjectM.FemaleFacesEntry> FemaleFacesEntries => _world.EntityManager.GetBufferInternal<ProjectM.FemaleFacesEntry>(_entity);
        public List<ProjectM.FemaleHairsEntry> FemaleHairsEntries => _world.EntityManager.GetBufferInternal<ProjectM.FemaleHairsEntry>(_entity);
        public List<ProjectM.FemaleFeaturesEntry> FemaleFeaturesEntries => _world.EntityManager.GetBufferInternal<ProjectM.FemaleFeaturesEntry>(_entity);
        public List<ProjectM.FemaleAccessoriesEntry> FemaleAccessoriesEntries => _world.EntityManager.GetBufferInternal<ProjectM.FemaleAccessoriesEntry>(_entity);
        public List<ProjectM.PrefabSetBuffer> PrefabSetBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PrefabSetBuffer>(_entity);
        public List<ProjectM.PrefabSetSourceObjectBuffer> PrefabSetSourceObjectBuffers => _world.EntityManager.GetBufferInternal<ProjectM.PrefabSetSourceObjectBuffer>(_entity);
        public ProjectM.GeneralGameplayCollection? GeneralGameplayCollection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GeneralGameplayCollection>(_entity, out var value) ? value : null;
        public ProjectM.DropTableData? DropTableData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DropTableData>(_entity, out var value) ? value : null;
        public List<ProjectM.DropTableDataBuffer> DropTableDataBuffers => _world.EntityManager.GetBufferInternal<ProjectM.DropTableDataBuffer>(_entity);
        public List<ProjectM.UI.UnitBloodTypeBuffs> UnitBloodTypeBuffs => _world.EntityManager.GetBufferInternal<ProjectM.UI.UnitBloodTypeBuffs>(_entity);
        public ProjectM.Gameplay.Clan.ClanSystemSettingsComponent? ClanSystemSettingsComponent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Gameplay.Clan.ClanSystemSettingsComponent>(_entity, out var value) ? value : null;
        public ProjectM.PerkData? PerkData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PerkData>(_entity, out var value) ? value : null;
        public ProjectM.DayTimeSpan? DayTimeSpan => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DayTimeSpan>(_entity, out var value) ? value : null;
        public ProjectM.MissionData? MissionData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MissionData>(_entity, out var value) ? value : null;
        public ProjectM.RecipeData? RecipeData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RecipeData>(_entity, out var value) ? value : null;
        public List<ProjectM.RecipeOutputBuffer> RecipeOutputBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RecipeOutputBuffer>(_entity);
        public List<ProjectM.RecipeOutputUnitBuffer> RecipeOutputUnitBuffers => _world.EntityManager.GetBufferInternal<ProjectM.RecipeOutputUnitBuffer>(_entity);
        public List<ProjectM.LifeLeechSetting> LifeLeechSettings => _world.EntityManager.GetBufferInternal<ProjectM.LifeLeechSetting>(_entity);
        public List<ProjectM.Sequencer.ImpactMaterialMappingBuffer> ImpactMaterialMappingBuffers => _world.EntityManager.GetBufferInternal<ProjectM.Sequencer.ImpactMaterialMappingBuffer>(_entity);
        public List<ProjectM.EquipmentSetElements> EquipmentSetElements => _world.EntityManager.GetBufferInternal<ProjectM.EquipmentSetElements>(_entity);
        public List<ProjectM.EquipmentSet> EquipmentSets => _world.EntityManager.GetBufferInternal<ProjectM.EquipmentSet>(_entity);
        public ProjectM.JournalTooltip? JournalTooltip => _world.EntityManager.TryGetComponentDataInternal<ProjectM.JournalTooltip>(_entity, out var value) ? value : null;
        public ProjectM.UpgradeData? UpgradeData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UpgradeData>(_entity, out var value) ? value : null;
        public List<ProjectM.UpgradeRequirementBuffer> UpgradeRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.UpgradeRequirementBuffer>(_entity);
        public ProjectM.ItemDataDropGroup? ItemDataDropGroup => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ItemDataDropGroup>(_entity, out var value) ? value : null;
        public List<ProjectM.ItemDataDropGroupBuffer> ItemDataDropGroupBuffers => _world.EntityManager.GetBufferInternal<ProjectM.ItemDataDropGroupBuffer>(_entity);
        public List<ProjectM.ItemRepairBuffer> ItemRepairBuffers => _world.EntityManager.GetBufferInternal<ProjectM.ItemRepairBuffer>(_entity);
        public ProjectM.TechData? TechData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TechData>(_entity, out var value) ? value : null;
        public List<ProjectM.TechUnlockAbilityBuffer> TechUnlockAbilityBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechUnlockAbilityBuffer>(_entity);
        public List<ProjectM.TechUnlockRecipeBuffer> TechUnlockRecipeBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechUnlockRecipeBuffer>(_entity);
        public List<ProjectM.TechUnlockBlueprintBuffer> TechUnlockBlueprintBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechUnlockBlueprintBuffer>(_entity);
        public List<ProjectM.TechRequirementBuffer> TechRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechRequirementBuffer>(_entity);
        public List<ProjectM.TechItemRequirementBuffer> TechItemRequirementBuffers => _world.EntityManager.GetBufferInternal<ProjectM.TechItemRequirementBuffer>(_entity);
        public ProjectM.SCTTypeCollection? SCTTypeCollection => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SCTTypeCollection>(_entity, out var value) ? value : null;
        public ProjectM.RagdollSourceSetting? RagdollSourceSetting => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RagdollSourceSetting>(_entity, out var value) ? value : null;
        public List<ProjectM.UnitStatsSettingsElement> UnitStatsSettingsElements => _world.EntityManager.GetBufferInternal<ProjectM.UnitStatsSettingsElement>(_entity);
        public List<ProjectM.BuffResistanceElement> BuffResistanceElements => _world.EntityManager.GetBufferInternal<ProjectM.BuffResistanceElement>(_entity);
        public ProjectM.Faction? Faction => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Faction>(_entity, out var value) ? value : null;
        public ProjectM.HealingBuff? HealingBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.HealingBuff>(_entity, out var value) ? value : null;
        public ProjectM.MiscItemLevel? MiscItemLevel => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MiscItemLevel>(_entity, out var value) ? value : null;
        public ProjectM.RepairData? RepairData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RepairData>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuffsSettings? CastleBuffsSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuffsSettings>(_entity, out var value) ? value : null;
        public List<ProjectM.HybridCameraFrustumPlanes> HybridCameraFrustumPlanes => _world.EntityManager.GetBufferInternal<ProjectM.HybridCameraFrustumPlanes>(_entity);
        public ProjectM.AchievementSubTaskData? AchievementSubTaskData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AchievementSubTaskData>(_entity, out var value) ? value : null;
        public ProjectM.AchievementData? AchievementData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AchievementData>(_entity, out var value) ? value : null;
        public List<ProjectM.AchievementSubTaskEntry> AchievementSubTaskEntries => _world.EntityManager.GetBufferInternal<ProjectM.AchievementSubTaskEntry>(_entity);
        public ProjectM.StationBonusData? StationBonusData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StationBonusData>(_entity, out var value) ? value : null;
        public ProjectM.GlobalCastleManager? GlobalCastleManager => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GlobalCastleManager>(_entity, out var value) ? value : null;
        public List<ProjectM.GlobalCastleManagerBuffer> GlobalCastleManagerBuffers => _world.EntityManager.GetBufferInternal<ProjectM.GlobalCastleManagerBuffer>(_entity);
        public List<ProjectM.UserMapZonePackedRevealElement> UserMapZonePackedRevealElements => _world.EntityManager.GetBufferInternal<ProjectM.UserMapZonePackedRevealElement>(_entity);
        public ProjectM.StoredBlood? StoredBlood => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StoredBlood>(_entity, out var value) ? value : null;
        public ProjectM.ProgressAchievementOnItemGain? ProgressAchievementOnItemGain => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ProgressAchievementOnItemGain>(_entity, out var value) ? value : null;
        public ProjectM.SpellLevelSource? SpellLevelSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpellLevelSource>(_entity, out var value) ? value : null;
        public ProjectM.GiveAchievementOnItemCraft? GiveAchievementOnItemCraft => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GiveAchievementOnItemCraft>(_entity, out var value) ? value : null;
        public ProjectM.WaypointMapIcon? WaypointMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.WaypointMapIcon>(_entity, out var value) ? value : null;
        public ProjectM.CastleBuilding.CastleRoom? CastleRoom => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleBuilding.CastleRoom>(_entity, out var value) ? value : null;
        public List<ProjectM.CastleBuilding.CastleRoomFloorsBuffer> CastleRoomFloorsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleRoomFloorsBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleRoomWallsBuffer> CastleRoomWallsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleRoomWallsBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleRoomMissingWallsBuffer> CastleRoomMissingWallsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleRoomMissingWallsBuffer>(_entity);
        public List<ProjectM.CastleBuilding.CastleRoomWorkstationsBuffer> CastleRoomWorkstationsBuffers => _world.EntityManager.GetBufferInternal<ProjectM.CastleBuilding.CastleRoomWorkstationsBuffer>(_entity);
        public ProjectM.ServerDebugLogs? ServerDebugLogs => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerDebugLogs>(_entity, out var value) ? value : null;
        public ProjectM.ServerTime? ServerTime => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerTime>(_entity, out var value) ? value : null;
        public ProjectM.ClanInviteRequest? ClanInviteRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ClanInviteRequest>(_entity, out var value) ? value : null;
        public ProjectM.VBloodProgressionUnlockData? VBloodProgressionUnlockData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodProgressionUnlockData>(_entity, out var value) ? value : null;
        public List<ProjectM.UnlockedProgressionElement> UnlockedProgressionElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedProgressionElement>(_entity);
        public List<ProjectM.Network.DiscoveredMapZoneElement> DiscoveredMapZoneElements => _world.EntityManager.GetBufferInternal<ProjectM.Network.DiscoveredMapZoneElement>(_entity);
        public List<ProjectM.UnlockedShapeshiftElement> UnlockedShapeshiftElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedShapeshiftElement>(_entity);
        public List<ProjectM.UnlockedRecipeElement> UnlockedRecipeElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedRecipeElement>(_entity);
        public List<ProjectM.UnlockedBlueprintElement> UnlockedBlueprintElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedBlueprintElement>(_entity);
        public List<ProjectM.UnlockedPassiveElement> UnlockedPassiveElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedPassiveElement>(_entity);
        public List<ProjectM.UnlockedAbilityElement> UnlockedAbilityElements => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedAbilityElement>(_entity);
        public List<ProjectM.UnlockedVBlood> UnlockedVBloods => _world.EntityManager.GetBufferInternal<ProjectM.UnlockedVBlood>(_entity);
        public ProjectM.UserBoundMapIconSource? UserBoundMapIconSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UserBoundMapIconSource>(_entity, out var value) ? value : null;
        public bool UpdateAgeWhenDisabled => _world.EntityManager.HasComponentInternal<ProjectM.UpdateAgeWhenDisabled>(_entity);
        public bool UpdateLifeTimeWhenDisabled => _world.EntityManager.HasComponentInternal<ProjectM.UpdateLifeTimeWhenDisabled>(_entity);
        public ProjectM.DealDamageToPrisoner? DealDamageToPrisoner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DealDamageToPrisoner>(_entity, out var value) ? value : null;
        public ProjectM.Network.InputCommandData? InputCommandData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.InputCommandData>(_entity, out var value) ? value : null;
        public ProjectM.Network.InputCommandState? InputCommandState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.InputCommandState>(_entity, out var value) ? value : null;
        public ProjectM.JumpFromCliffsTravelBuff? JumpFromCliffsTravelBuff => _world.EntityManager.TryGetComponentDataInternal<ProjectM.JumpFromCliffsTravelBuff>(_entity, out var value) ? value : null;
        public ProjectM.ArmorLevelSource? ArmorLevelSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ArmorLevelSource>(_entity, out var value) ? value : null;
        public ProjectM.RelicSpawnBoundMapIcon? RelicSpawnBoundMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RelicSpawnBoundMapIcon>(_entity, out var value) ? value : null;
        public ProjectM.SpawnLocationSelector? SpawnLocationSelector => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnLocationSelector>(_entity, out var value) ? value : null;
        public bool NetworkedSequence => _world.EntityManager.HasComponentInternal<ProjectM.NetworkedSequence>(_entity);
        public ProjectM.StartGraveyardMapIcon? StartGraveyardMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StartGraveyardMapIcon>(_entity, out var value) ? value : null;
        public ProjectM.PlayerMapIcon? PlayerMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PlayerMapIcon>(_entity, out var value) ? value : null;
        public ProjectM.VBloodBoundMapIcon? VBloodBoundMapIcon => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodBoundMapIcon>(_entity, out var value) ? value : null;
        public bool RelicMapIcon => _world.EntityManager.HasComponentInternal<ProjectM.RelicMapIcon>(_entity);
        public ProjectM.VBloodItemSource? VBloodItemSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodItemSource>(_entity, out var value) ? value : null;
        public ProjectM.TimeScale? TimeScale => _world.EntityManager.TryGetComponentDataInternal<ProjectM.TimeScale>(_entity, out var value) ? value : null;
        public ProjectM.DayNightCycle? DayNightCycle => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DayNightCycle>(_entity, out var value) ? value : null;
        public ProjectM.CastleIsland? CastleIsland => _world.EntityManager.TryGetComponentDataInternal<ProjectM.CastleIsland>(_entity, out var value) ? value : null;
        public ProjectM.FeedPrisoner? FeedPrisoner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.FeedPrisoner>(_entity, out var value) ? value : null;
        public bool TeleportOwnerToBaseOnSpawn => _world.EntityManager.HasComponentInternal<ProjectM.TeleportOwnerToBaseOnSpawn>(_entity);
        public ProjectM.ScrollingCombatTextMessage? ScrollingCombatTextMessage => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ScrollingCombatTextMessage>(_entity, out var value) ? value : null;
        public bool EntitySpawnedMetadata => _world.EntityManager.HasComponentInternal<ProjectM.Gameplay.EntitySpawnedMetadata>(_entity);
        public ProjectM.PatrolState? PatrolState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PatrolState>(_entity, out var value) ? value : null;
        public ProjectM.UnitCompositionSpawner? UnitCompositionSpawner => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitCompositionSpawner>(_entity, out var value) ? value : null;
        public ProjectM.MovePatrolState? MovePatrolState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MovePatrolState>(_entity, out var value) ? value : null;
        public ProjectM.UnitCompositionSpawnerDebugName? UnitCompositionSpawnerDebugName => _world.EntityManager.TryGetComponentDataInternal<ProjectM.UnitCompositionSpawnerDebugName>(_entity, out var value) ? value : null;
        public List<ProjectM.UnitCompositionActiveUnit> UnitCompositionActiveUnits => _world.EntityManager.GetBufferInternal<ProjectM.UnitCompositionActiveUnit>(_entity);
        public List<ProjectM.FormationOffsetBuffer> FormationOffsetBuffers => _world.EntityManager.GetBufferInternal<ProjectM.FormationOffsetBuffer>(_entity);
        public List<ProjectM.UnitCompositionGroupEntry> UnitCompositionGroupEntries => _world.EntityManager.GetBufferInternal<ProjectM.UnitCompositionGroupEntry>(_entity);
        public List<ProjectM.UnitCompositionGroupUnitEntry> UnitCompositionGroupUnitEntries => _world.EntityManager.GetBufferInternal<ProjectM.UnitCompositionGroupUnitEntry>(_entity);
        public ProjectM.PathSettings? PathSettings => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PathSettings>(_entity, out var value) ? value : null;
        public List<ProjectM.Terrain.GlobalPatrolElement> GlobalPatrolElements => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.GlobalPatrolElement>(_entity);
        public ProjectM.Pathfinding.PathRequest? PathRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Pathfinding.PathRequest>(_entity, out var value) ? value : null;
        public ProjectM.PathWaypointNode? PathWaypointNode => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PathWaypointNode>(_entity, out var value) ? value : null;
        public List<ProjectM.PathWaypointNeighbours> PathWaypointNeighbours => _world.EntityManager.GetBufferInternal<ProjectM.PathWaypointNeighbours>(_entity);
        public ProjectM.SpawnGroupData? SpawnGroupData => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnGroupData>(_entity, out var value) ? value : null;
        public List<ProjectM.SpawnGroup_SpawnTableBuffer> SpawnGroup_SpawnTableBuffer => _world.EntityManager.GetBufferInternal<ProjectM.SpawnGroup_SpawnTableBuffer>(_entity);
        public ProjectM.Network.FromCharacter? FromCharacter => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.FromCharacter>(_entity, out var value) ? value : null;
        public ProjectM.Network.GiveDebugEvent? GiveDebugEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.GiveDebugEvent>(_entity, out var value) ? value : null;
        public ProjectM.SpawnRegion? SpawnRegion => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnRegion>(_entity, out var value) ? value : null;
        public List<ProjectM.SpawnGroupBuffer> SpawnGroupBuffers => _world.EntityManager.GetBufferInternal<ProjectM.SpawnGroupBuffer>(_entity);
        public List<ProjectM.SpawnRegion_ActiveEntities> SpawnRegion_ActiveEntities => _world.EntityManager.GetBufferInternal<ProjectM.SpawnRegion_ActiveEntities>(_entity);
        public List<ProjectM.SpawnPointBuffer> SpawnPointBuffers => _world.EntityManager.GetBufferInternal<ProjectM.SpawnPointBuffer>(_entity);
        public List<ProjectM.SpawnRegionSpawnSlotEntry> SpawnRegionSpawnSlotEntries => _world.EntityManager.GetBufferInternal<ProjectM.SpawnRegionSpawnSlotEntry>(_entity);
        public ProjectM.VBloodUnitSpawnSource? VBloodUnitSpawnSource => _world.EntityManager.TryGetComponentDataInternal<ProjectM.VBloodUnitSpawnSource>(_entity, out var value) ? value : null;
        public ProjectM.Network.SpawnDebugEvent? SpawnDebugEvent => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Network.SpawnDebugEvent>(_entity, out var value) ? value : null;
        public ProjectM.Behaviours.EvaluateCastOptionsRequest? EvaluateCastOptionsRequest => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Behaviours.EvaluateCastOptionsRequest>(_entity, out var value) ? value : null;
        public List<ProjectM.AbilityGroupSlotModificationBuffer> AbilityGroupSlotModificationBuffers => _world.EntityManager.GetBufferInternal<ProjectM.AbilityGroupSlotModificationBuffer>(_entity);
        public bool DisabledTileModel => _world.EntityManager.HasComponentInternal<ProjectM.Tiles.DisabledTileModel>(_entity);
        public ProjectM.GlobalPatrolState? GlobalPatrolState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.GlobalPatrolState>(_entity, out var value) ? value : null;
        public List<ProjectM.WaypointTargetBufferEntry> WaypointTargetBufferEntries => _world.EntityManager.GetBufferInternal<ProjectM.WaypointTargetBufferEntry>(_entity);
        public List<ProjectM.PatrolBusStopNode> PatrolBusStopNodes => _world.EntityManager.GetBufferInternal<ProjectM.PatrolBusStopNode>(_entity);
        public List<ProjectM.Terrain.RoadTypePathfindingWeightsElement> RoadTypePathfindingWeightsElements => _world.EntityManager.GetBufferInternal<ProjectM.Terrain.RoadTypePathfindingWeightsElement>(_entity);
        public ProjectM.PathWaypointNodeWait? PathWaypointNodeWait => _world.EntityManager.TryGetComponentDataInternal<ProjectM.PathWaypointNodeWait>(_entity, out var value) ? value : null;
        public ProjectM.OnKillListener? OnKillListener => _world.EntityManager.TryGetComponentDataInternal<ProjectM.OnKillListener>(_entity, out var value) ? value : null;
        public bool ListenerTag => _world.EntityManager.HasComponentInternal<ProjectM.Scripting.ListenerTag>(_entity);
        public ProjectM.StatChangeListener? StatChangeListener => _world.EntityManager.TryGetComponentDataInternal<ProjectM.StatChangeListener>(_entity, out var value) ? value : null;
        public ProjectM.SpawnChainChild? SpawnChainChild => _world.EntityManager.TryGetComponentDataInternal<ProjectM.SpawnChainChild>(_entity, out var value) ? value : null;
        public bool GuaranteedStaticTransform => _world.EntityManager.HasComponentInternal<ProjectM.GuaranteedStaticTransform>(_entity);
        public ProjectM.Dead? Dead => _world.EntityManager.TryGetComponentDataInternal<ProjectM.Dead>(_entity, out var value) ? value : null;
        public ProjectM.RandomizedSpawnChainChild? RandomizedSpawnChainChild => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RandomizedSpawnChainChild>(_entity, out var value) ? value : null;
        public bool VerifyCastleAreaConnection => _world.EntityManager.HasComponentInternal<ProjectM.CastleBuilding.VerifyCastleAreaConnection>(_entity);
        public bool WasDisabledBeforeNoPlayersInRange => _world.EntityManager.HasComponentInternal<ProjectM.WasDisabledBeforeNoPlayersInRange>(_entity);
        public ProjectM.ControlledBy? ControlledBy => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ControlledBy>(_entity, out var value) ? value : null;
        public List<ProjectM.MinionBuffer> MinionBuffers => _world.EntityManager.GetBufferInternal<ProjectM.MinionBuffer>(_entity);
        public ProjectM.ImmaterialBuffModifications? ImmaterialBuffModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ImmaterialBuffModifications>(_entity, out var value) ? value : null;
        public ProjectM.DisableAggroBuffModifications? DisableAggroBuffModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DisableAggroBuffModifications>(_entity, out var value) ? value : null;
        public bool AbilityGroupComboActive => _world.EntityManager.HasComponentInternal<ProjectM.AbilityGroupComboActive>(_entity);
        public ProjectM.ChangeKnockbackResistanceBuffModification? ChangeKnockbackResistanceBuffModification => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ChangeKnockbackResistanceBuffModification>(_entity, out var value) ? value : null;
        public ProjectM.ModifyAggroRangesBuffModifications? ModifyAggroRangesBuffModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyAggroRangesBuffModifications>(_entity, out var value) ? value : null;
        public ProjectM.MovementImpairModifications? MovementImpairModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.MovementImpairModifications>(_entity, out var value) ? value : null;
        public ProjectM.RotationImpairModifications? RotationImpairModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.RotationImpairModifications>(_entity, out var value) ? value : null;
        public ProjectM.InvulnerableBuffModifications? InvulnerableBuffModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.InvulnerableBuffModifications>(_entity, out var value) ? value : null;
        public ProjectM.AbilityIsCastingState? AbilityIsCastingState => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityIsCastingState>(_entity, out var value) ? value : null;
        public ProjectM.ModifyMovementSpeedBuffModification? ModifyMovementSpeedBuffModification => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ModifyMovementSpeedBuffModification>(_entity, out var value) ? value : null;
        public ProjectM.AbilityCastImpairModifications? AbilityCastImpairModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AbilityCastImpairModifications>(_entity, out var value) ? value : null;
        public ProjectM.AdminUser? AdminUser => _world.EntityManager.TryGetComponentDataInternal<ProjectM.AdminUser>(_entity, out var value) ? value : null;
        public bool DestroyWhenDisabled => _world.EntityManager.HasComponentInternal<ProjectM.DestroyWhenDisabled>(_entity);
        public ProjectM.ServerControlsPositionModifications? ServerControlsPositionModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ServerControlsPositionModifications>(_entity, out var value) ? value : null;
        public ProjectM.DisableDynamicCollisionModifications? DisableDynamicCollisionModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DisableDynamicCollisionModifications>(_entity, out var value) ? value : null;
        public ProjectM.DisableMapCollisionModifications? DisableMapCollisionModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.DisableMapCollisionModifications>(_entity, out var value) ? value : null;
        public ProjectM.ImmuneToSunBuffModifications? ImmuneToSunBuffModifications => _world.EntityManager.TryGetComponentDataInternal<ProjectM.ImmuneToSunBuffModifications>(_entity, out var value) ? value : null;
    }
}